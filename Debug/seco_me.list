
seco_me.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004714  08004714  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800471c  0800471c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000071e4  20000070  08004794  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007254  08004794  00027254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1bf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d16  00000000  00000000  0002f25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00030f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00031ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dea  00000000  00000000  00032720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4b8  00000000  00000000  0005450a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0e0d  00000000  00000000  000629c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001337cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000371c  00000000  00000000  00133824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004698 	.word	0x08004698

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004698 	.word	0x08004698

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b0b4      	sub	sp, #208	; 0xd0
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fd8d 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f8bd 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 fa7b 	bl	8000ab0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 fa4f 	bl	8000a5c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005be:	f000 f9cb 	bl	8000958 <MX_TIM3_Init>
  MX_TIM1_Init();
 80005c2:	f000 f923 	bl	800080c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c6:	f000 f979 	bl	80008bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	484d      	ldr	r0, [pc, #308]	; (8000708 <main+0x160>)
 80005d2:	f001 f8b7 	bl	8001744 <HAL_GPIO_WritePin>
  getVoltage(1, &htim3);
 80005d6:	484d      	ldr	r0, [pc, #308]	; (800070c <main+0x164>)
 80005d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80005dc:	f000 fad8 	bl	8000b90 <getVoltage>
  for (cur_voltage = 1; cur_voltage <= 12; cur_voltage++) {
 80005e0:	4b4b      	ldr	r3, [pc, #300]	; (8000710 <main+0x168>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e01d      	b.n	8000624 <main+0x7c>
	  //generador de experimentos
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	4848      	ldr	r0, [pc, #288]	; (800070c <main+0x164>)
 80005ec:	f001 ff76 	bl	80024dc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005f0:	2104      	movs	r1, #4
 80005f2:	4846      	ldr	r0, [pc, #280]	; (800070c <main+0x164>)
 80005f4:	f001 ff72 	bl	80024dc <HAL_TIM_PWM_Start>
	  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005f8:	213c      	movs	r1, #60	; 0x3c
 80005fa:	4846      	ldr	r0, [pc, #280]	; (8000714 <main+0x16c>)
 80005fc:	f002 f94c 	bl	8002898 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Base_Start_IT(&htim2);
 8000600:	4845      	ldr	r0, [pc, #276]	; (8000718 <main+0x170>)
 8000602:	f001 fe73 	bl	80022ec <HAL_TIM_Base_Start_IT>
	  // polling wait for finish
	  while (!finished);
 8000606:	bf00      	nop
 8000608:	4b44      	ldr	r3, [pc, #272]	; (800071c <main+0x174>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0fa      	beq.n	8000608 <main+0x60>
	  finished = 0;
 8000612:	4b42      	ldr	r3, [pc, #264]	; (800071c <main+0x174>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
  for (cur_voltage = 1; cur_voltage <= 12; cur_voltage++) {
 8000618:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <main+0x168>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <main+0x168>)
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <main+0x168>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b0c      	cmp	r3, #12
 800062a:	d9dd      	bls.n	80005e8 <main+0x40>
  }

// halt everything
  HAL_TIM_Base_Stop_IT(&htim2);
 800062c:	483a      	ldr	r0, [pc, #232]	; (8000718 <main+0x170>)
 800062e:	f001 fecd 	bl	80023cc <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000632:	4b39      	ldr	r3, [pc, #228]	; (8000718 <main+0x170>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800063a:	2100      	movs	r1, #0
 800063c:	4833      	ldr	r0, [pc, #204]	; (800070c <main+0x164>)
 800063e:	f002 f815 	bl	800266c <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000642:	2104      	movs	r1, #4
 8000644:	4831      	ldr	r0, [pc, #196]	; (800070c <main+0x164>)
 8000646:	f002 f811 	bl	800266c <HAL_TIM_PWM_Stop>
  HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 800064a:	213c      	movs	r1, #60	; 0x3c
 800064c:	4831      	ldr	r0, [pc, #196]	; (8000714 <main+0x16c>)
 800064e:	f002 f9b1 	bl	80029b4 <HAL_TIM_Encoder_Stop>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <main+0x16c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24

  for (int i = 0; i < 12; i++) {
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000660:	e04d      	b.n	80006fe <main+0x156>
	  uint8_t e[100] = {0};
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2260      	movs	r2, #96	; 0x60
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fbdd 	bl	8003e2c <memset>
	  sprintf(e, "Experiment %d\r\n", i);
 8000672:	463b      	mov	r3, r7
 8000674:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <main+0x178>)
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fbde 	bl	8003e3c <siprintf>
	  HAL_UART_Transmit(&huart2, e, sizeof(e), 10);
 8000680:	4639      	mov	r1, r7
 8000682:	230a      	movs	r3, #10
 8000684:	2264      	movs	r2, #100	; 0x64
 8000686:	4827      	ldr	r0, [pc, #156]	; (8000724 <main+0x17c>)
 8000688:	f003 f8dd 	bl	8003846 <HAL_UART_Transmit>
	  for (int j = 0; j < 1200; j++) {
 800068c:	2300      	movs	r3, #0
 800068e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000692:	e02a      	b.n	80006ea <main+0x142>
		  uint8_t m[100] = {0};
 8000694:	2300      	movs	r3, #0
 8000696:	667b      	str	r3, [r7, #100]	; 0x64
 8000698:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800069c:	2260      	movs	r2, #96	; 0x60
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fbc3 	bl	8003e2c <memset>
		  sprintf(m, "%d %d\r\n", j, muestras[i][j]);
 80006a6:	4920      	ldr	r1, [pc, #128]	; (8000728 <main+0x180>)
 80006a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80006ac:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80006b0:	fb02 f203 	mul.w	r2, r2, r3
 80006b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80006b8:	4413      	add	r3, r2
 80006ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006be:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80006c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80006c6:	4919      	ldr	r1, [pc, #100]	; (800072c <main+0x184>)
 80006c8:	f003 fbb8 	bl	8003e3c <siprintf>
		  HAL_UART_Transmit(&huart2, m, sizeof(m), 10);
 80006cc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80006d0:	230a      	movs	r3, #10
 80006d2:	2264      	movs	r2, #100	; 0x64
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <main+0x17c>)
 80006d6:	f003 f8b6 	bl	8003846 <HAL_UART_Transmit>
		  HAL_Delay(20);
 80006da:	2014      	movs	r0, #20
 80006dc:	f000 fd68 	bl	80011b0 <HAL_Delay>
	  for (int j = 0; j < 1200; j++) {
 80006e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80006e4:	3301      	adds	r3, #1
 80006e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80006ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80006ee:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80006f2:	dbcf      	blt.n	8000694 <main+0xec>
  for (int i = 0; i < 12; i++) {
 80006f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80006f8:	3301      	adds	r3, #1
 80006fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80006fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000702:	2b0b      	cmp	r3, #11
 8000704:	ddad      	ble.n	8000662 <main+0xba>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000706:	e7fe      	b.n	8000706 <main+0x15e>
 8000708:	40020000 	.word	0x40020000
 800070c:	20007120 	.word	0x20007120
 8000710:	200071b0 	.word	0x200071b0
 8000714:	20007168 	.word	0x20007168
 8000718:	200071b4 	.word	0x200071b4
 800071c:	2000008c 	.word	0x2000008c
 8000720:	080046b0 	.word	0x080046b0
 8000724:	200071fc 	.word	0x200071fc
 8000728:	20000094 	.word	0x20000094
 800072c:	080046c0 	.word	0x080046c0

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fb74 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a29      	ldr	r2, [pc, #164]	; (8000804 <SystemClock_Config+0xd4>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <SystemClock_Config+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <SystemClock_Config+0xd8>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a4:	2310      	movs	r3, #16
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 faa6 	bl	8001d10 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ca:	f000 fa3f 	bl	8000c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 ffc4 	bl	8001778 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007f6:	f000 fa29 	bl	8000c4c <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2224      	movs	r2, #36	; 0x24
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fb06 	bl	8003e2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_TIM1_Init+0xa8>)
 800082a:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <MX_TIM1_Init+0xac>)
 800082c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_TIM1_Init+0xa8>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_TIM1_Init+0xa8>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_TIM1_Init+0xa8>)
 800083c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000840:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_TIM1_Init+0xa8>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_TIM1_Init+0xa8>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_TIM1_Init+0xa8>)
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000854:	2303      	movs	r3, #3
 8000856:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800085c:	2301      	movs	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800086c:	2301      	movs	r3, #1
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_TIM1_Init+0xa8>)
 8000880:	f001 ff64 	bl	800274c <HAL_TIM_Encoder_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800088a:	f000 f9df 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_TIM1_Init+0xa8>)
 800089c:	f002 fef6 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80008a6:	f000 f9d1 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3730      	adds	r7, #48	; 0x30
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20007168 	.word	0x20007168
 80008b8:	40010000 	.word	0x40010000

080008bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM2_Init+0x94>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_TIM2_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_TIM2_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84000-1;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_TIM2_Init+0x94>)
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <MX_TIM2_Init+0x98>)
 80008f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_TIM2_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_TIM2_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008fe:	4814      	ldr	r0, [pc, #80]	; (8000950 <MX_TIM2_Init+0x94>)
 8000900:	f001 fca4 	bl	800224c <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f99f 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4619      	mov	r1, r3
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_TIM2_Init+0x94>)
 800091c:	f002 faac 	bl	8002e78 <HAL_TIM_ConfigClockSource>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f991 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <MX_TIM2_Init+0x94>)
 8000938:	f002 fea8 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000942:	f000 f983 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200071b4 	.word	0x200071b4
 8000954:	0001481f 	.word	0x0001481f

08000958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08e      	sub	sp, #56	; 0x38
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	f107 0320 	add.w	r3, r7, #32
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]
 8000986:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <MX_TIM3_Init+0xfc>)
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <MX_TIM3_Init+0x100>)
 800098c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <MX_TIM3_Init+0xfc>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <MX_TIM3_Init+0xfc>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2100-1;
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_TIM3_Init+0xfc>)
 800099c:	f640 0233 	movw	r2, #2099	; 0x833
 80009a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <MX_TIM3_Init+0xfc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_TIM3_Init+0xfc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ae:	4829      	ldr	r0, [pc, #164]	; (8000a54 <MX_TIM3_Init+0xfc>)
 80009b0:	f001 fc4c 	bl	800224c <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009ba:	f000 f947 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4822      	ldr	r0, [pc, #136]	; (8000a54 <MX_TIM3_Init+0xfc>)
 80009cc:	f002 fa54 	bl	8002e78 <HAL_TIM_ConfigClockSource>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009d6:	f000 f939 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009da:	481e      	ldr	r0, [pc, #120]	; (8000a54 <MX_TIM3_Init+0xfc>)
 80009dc:	f001 fd25 	bl	800242a <HAL_TIM_PWM_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009e6:	f000 f931 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	4619      	mov	r1, r3
 80009f8:	4816      	ldr	r0, [pc, #88]	; (8000a54 <MX_TIM3_Init+0xfc>)
 80009fa:	f002 fe47 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a04:	f000 f922 	bl	8000c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a08:	2360      	movs	r3, #96	; 0x60
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_TIM3_Init+0xfc>)
 8000a20:	f002 f968 	bl	8002cf4 <HAL_TIM_PWM_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a2a:	f000 f90f 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2204      	movs	r2, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <MX_TIM3_Init+0xfc>)
 8000a36:	f002 f95d 	bl	8002cf4 <HAL_TIM_PWM_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000a40:	f000 f904 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <MX_TIM3_Init+0xfc>)
 8000a46:	f000 f9b3 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000a4a:	bf00      	nop
 8000a4c:	3738      	adds	r7, #56	; 0x38
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20007120 	.word	0x20007120
 8000a58:	40000400 	.word	0x40000400

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_USART2_UART_Init+0x50>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f002 fe8a 	bl	80037ac <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a9e:	f000 f8d5 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200071fc 	.word	0x200071fc
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_GPIO_Init+0xd4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000b3e:	f000 fe01 	bl	8001744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b48:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_GPIO_Init+0xdc>)
 8000b5a:	f000 fc5f 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000b5e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_GPIO_Init+0xd8>)
 8000b78:	f000 fc50 	bl	800141c <HAL_GPIO_Init>

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020800 	.word	0x40020800

08000b90 <getVoltage>:

/* USER CODE BEGIN 4 */

void getVoltage(float voltage, TIM_HandleTypeDef* tim1){
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b9a:	6038      	str	r0, [r7, #0]

//	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + CH1_FREQ));

	int pulse = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]

	if (voltage > 12.0 || voltage < -12.0) {
 8000ba0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb0:	dc08      	bgt.n	8000bc4 <getVoltage+0x34>
 8000bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb6:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
 8000bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d502      	bpl.n	8000bca <getVoltage+0x3a>
		pulse = 2100-1;
 8000bc4:	f640 0333 	movw	r3, #2099	; 0x833
 8000bc8:	60fb      	str	r3, [r7, #12]
	}

	if (voltage >= 0.0 ) {
 8000bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd6:	db17      	blt.n	8000c08 <getVoltage+0x78>
		pulse =(int) ((2100-1)*voltage/12);
 8000bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bdc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000c44 <getVoltage+0xb4>
 8000be0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000be4:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8000be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf0:	ee17 3a90 	vmov	r3, s15
 8000bf4:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(tim1, TIM_CHANNEL_1, pulse );
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(tim1, TIM_CHANNEL_2, 0 );
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2200      	movs	r2, #0
 8000c04:	639a      	str	r2, [r3, #56]	; 0x38
		pulse =(int) (-(2100-1)*voltage/12);
		__HAL_TIM_SET_COMPARE(tim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(tim1, TIM_CHANNEL_2, pulse);
	}

}
 8000c06:	e016      	b.n	8000c36 <getVoltage+0xa6>
		pulse =(int) (-(2100-1)*voltage/12);
 8000c08:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c0c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000c48 <getVoltage+0xb8>
 8000c10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c14:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8000c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c20:	ee17 3a90 	vmov	r3, s15
 8000c24:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(tim1, TIM_CHANNEL_1, 0);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(tim1, TIM_CHANNEL_2, pulse);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	45033000 	.word	0x45033000
 8000c48:	c5033000 	.word	0xc5033000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c96:	2007      	movs	r0, #7
 8000c98:	f000 fb7e 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12c      	bne.n	8000d24 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000d20:	f000 fb7c 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d48:	d116      	bne.n	8000d78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	201c      	movs	r0, #28
 8000d6c:	f000 fb1f 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d70:	201c      	movs	r0, #28
 8000d72:	f000 fb38 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d76:	e012      	b.n	8000d9e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <HAL_TIM_Base_MspInit+0x74>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10d      	bne.n	8000d9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_TIM_Base_MspInit+0x70>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40000400 	.word	0x40000400

08000db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <HAL_TIM_MspPostInit+0x68>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d11d      	bne.n	8000e0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_TIM_MspPostInit+0x6c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dee:	2330      	movs	r3, #48	; 0x30
 8000df0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_TIM_MspPostInit+0x70>)
 8000e0a:	f000 fb07 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40000400 	.word	0x40000400
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <HAL_UART_MspInit+0x84>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d12b      	bne.n	8000e9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_UART_MspInit+0x88>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_UART_MspInit+0x88>)
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_UART_MspInit+0x88>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_UART_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a10      	ldr	r2, [pc, #64]	; (8000eac <HAL_UART_MspInit+0x88>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_UART_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <HAL_UART_MspInit+0x8c>)
 8000e9a:	f000 fabf 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40004400 	.word	0x40004400
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>
	...

08000ebc <TIM2_IRQHandler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ebc:	b598      	push	{r3, r4, r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ec0:	482c      	ldr	r0, [pc, #176]	; (8000f74 <TIM2_IRQHandler+0xb8>)
 8000ec2:	f001 fe0e 	bl	8002ae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  if (ms > 1999) {
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <TIM2_IRQHandler+0xbc>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ece:	d329      	bcc.n	8000f24 <TIM2_IRQHandler+0x68>
	  // mandar una interrupcion para que el uart envie el buffer por consola y aparte apagar el timer y resetearlo
	  HAL_TIM_Base_Stop_IT(&htim2);
 8000ed0:	4828      	ldr	r0, [pc, #160]	; (8000f74 <TIM2_IRQHandler+0xb8>)
 8000ed2:	f001 fa7b 	bl	80023cc <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <TIM2_IRQHandler+0xb8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4826      	ldr	r0, [pc, #152]	; (8000f7c <TIM2_IRQHandler+0xc0>)
 8000ee2:	f001 fbc3 	bl	800266c <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	4824      	ldr	r0, [pc, #144]	; (8000f7c <TIM2_IRQHandler+0xc0>)
 8000eea:	f001 fbbf 	bl	800266c <HAL_TIM_PWM_Stop>
	  HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8000eee:	213c      	movs	r1, #60	; 0x3c
 8000ef0:	4823      	ldr	r0, [pc, #140]	; (8000f80 <TIM2_IRQHandler+0xc4>)
 8000ef2:	f001 fd5f 	bl	80029b4 <HAL_TIM_Encoder_Stop>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <TIM2_IRQHandler+0xc4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24

	  // activar flag para el uart que envie
	  getVoltage(cur_voltage+1, &htim3);
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <TIM2_IRQHandler+0xc8>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0c:	481b      	ldr	r0, [pc, #108]	; (8000f7c <TIM2_IRQHandler+0xc0>)
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	f7ff fe3d 	bl	8000b90 <getVoltage>
	  ms = 0;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <TIM2_IRQHandler+0xbc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	801a      	strh	r2, [r3, #0]
	  finished = 1;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <TIM2_IRQHandler+0xcc>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]

  //HAL_UART_Transmit(&huart2, msg, sizeof(msg), 2);

  /* USER CODE END TIM2_IRQn 1 */
}
}
 8000f22:	e025      	b.n	8000f70 <TIM2_IRQHandler+0xb4>
  if (ms == 599) {
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <TIM2_IRQHandler+0xbc>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	f240 2257 	movw	r2, #599	; 0x257
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d104      	bne.n	8000f3a <TIM2_IRQHandler+0x7e>
	  getVoltage(0, &htim3);
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <TIM2_IRQHandler+0xc0>)
 8000f32:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000f8c <TIM2_IRQHandler+0xd0>
 8000f36:	f7ff fe2b 	bl	8000b90 <getVoltage>
  cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <TIM2_IRQHandler+0xc4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <TIM2_IRQHandler+0xd4>)
 8000f44:	801a      	strh	r2, [r3, #0]
  muestras[cur_voltage-1][ms++] = cnt1;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <TIM2_IRQHandler+0xc8>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <TIM2_IRQHandler+0xbc>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	1c59      	adds	r1, r3, #1
 8000f52:	b288      	uxth	r0, r1
 8000f54:	4908      	ldr	r1, [pc, #32]	; (8000f78 <TIM2_IRQHandler+0xbc>)
 8000f56:	8008      	strh	r0, [r1, #0]
 8000f58:	461c      	mov	r4, r3
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <TIM2_IRQHandler+0xd4>)
 8000f5c:	8818      	ldrh	r0, [r3, #0]
 8000f5e:	490d      	ldr	r1, [pc, #52]	; (8000f94 <TIM2_IRQHandler+0xd8>)
 8000f60:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000f64:	fb03 f302 	mul.w	r3, r3, r2
 8000f68:	4423      	add	r3, r4
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000f70:	bf00      	nop
 8000f72:	bd98      	pop	{r3, r4, r7, pc}
 8000f74:	200071b4 	.word	0x200071b4
 8000f78:	2000008e 	.word	0x2000008e
 8000f7c:	20007120 	.word	0x20007120
 8000f80:	20007168 	.word	0x20007168
 8000f84:	200071b0 	.word	0x200071b0
 8000f88:	2000008c 	.word	0x2000008c
 8000f8c:	00000000 	.word	0x00000000
 8000f90:	20000090 	.word	0x20000090
 8000f94:	20000094 	.word	0x20000094

08000f98 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <HardFault_Handler+0x4>

08000f9e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <MemManage_Handler+0x4>

08000fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <BusFault_Handler+0x4>

08000faa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <UsageFault_Handler+0x4>

08000fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fde:	f000 f8c7 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f002 fede 	bl	8003dd8 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20020000 	.word	0x20020000
 8001048:	00000400 	.word	0x00000400
 800104c:	20007114 	.word	0x20007114
 8001050:	20007258 	.word	0x20007258

08001054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ffd7 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f002 fe9d 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fa7d 	bl	80005a8 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010bc:	08004724 	.word	0x08004724
  ldr r2, =_sbss
 80010c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010c4:	20007254 	.word	0x20007254

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f94f 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fdaa 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f967 	bl	8001402 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f92f 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000008 	.word	0x20000008
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	20007240 	.word	0x20007240

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20007240 	.word	0x20007240

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff3e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff31 	bl	800125c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e165      	b.n	8001704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	f040 8154 	bne.w	80016fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d005      	beq.n	800146e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	2b02      	cmp	r3, #2
 800146c:	d130      	bne.n	80014d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 0201 	and.w	r2, r3, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d017      	beq.n	800150c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d123      	bne.n	8001560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	69b9      	ldr	r1, [r7, #24]
 800155c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0203 	and.w	r2, r3, #3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80ae 	beq.w	80016fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_GPIO_Init+0x300>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a5c      	ldr	r2, [pc, #368]	; (800171c <HAL_GPIO_Init+0x300>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b5a      	ldr	r3, [pc, #360]	; (800171c <HAL_GPIO_Init+0x300>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015be:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_GPIO_Init+0x304>)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4f      	ldr	r2, [pc, #316]	; (8001724 <HAL_GPIO_Init+0x308>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d025      	beq.n	8001636 <HAL_GPIO_Init+0x21a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4e      	ldr	r2, [pc, #312]	; (8001728 <HAL_GPIO_Init+0x30c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d01f      	beq.n	8001632 <HAL_GPIO_Init+0x216>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4d      	ldr	r2, [pc, #308]	; (800172c <HAL_GPIO_Init+0x310>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d019      	beq.n	800162e <HAL_GPIO_Init+0x212>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <HAL_GPIO_Init+0x314>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0x20e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4b      	ldr	r2, [pc, #300]	; (8001734 <HAL_GPIO_Init+0x318>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00d      	beq.n	8001626 <HAL_GPIO_Init+0x20a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <HAL_GPIO_Init+0x31c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d007      	beq.n	8001622 <HAL_GPIO_Init+0x206>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a49      	ldr	r2, [pc, #292]	; (800173c <HAL_GPIO_Init+0x320>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_GPIO_Init+0x202>
 800161a:	2306      	movs	r3, #6
 800161c:	e00c      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 800161e:	2307      	movs	r3, #7
 8001620:	e00a      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 8001622:	2305      	movs	r3, #5
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 8001626:	2304      	movs	r3, #4
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x21c>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001648:	4935      	ldr	r1, [pc, #212]	; (8001720 <HAL_GPIO_Init+0x304>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <HAL_GPIO_Init+0x324>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167a:	4a31      	ldr	r2, [pc, #196]	; (8001740 <HAL_GPIO_Init+0x324>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <HAL_GPIO_Init+0x324>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a4:	4a26      	ldr	r2, [pc, #152]	; (8001740 <HAL_GPIO_Init+0x324>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_GPIO_Init+0x324>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <HAL_GPIO_Init+0x324>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_GPIO_Init+0x324>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f8:	4a11      	ldr	r2, [pc, #68]	; (8001740 <HAL_GPIO_Init+0x324>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f ae96 	bls.w	8001438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40021400 	.word	0x40021400
 800173c:	40021800 	.word	0x40021800
 8001740:	40013c00 	.word	0x40013c00

08001744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	4613      	mov	r3, r2
 8001752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001754:	787b      	ldrb	r3, [r7, #1]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001760:	e003      	b.n	800176a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	041a      	lsls	r2, r3, #16
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	619a      	str	r2, [r3, #24]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d90c      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d044      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d119      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e067      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4934      	ldr	r1, [pc, #208]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff fc96 	bl	8001198 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff fc92 	bl	8001198 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d20c      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f855 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	490a      	ldr	r1, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fbf6 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	080046c8 	.word	0x080046c8
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_RCC_GetHCLKFreq+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000000 	.word	0x20000000

0800195c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001960:	f7ff fff0 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	0a9b      	lsrs	r3, r3, #10
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4903      	ldr	r1, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	080046d8 	.word	0x080046d8

08001984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001988:	f7ff ffdc 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0b5b      	lsrs	r3, r3, #13
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	080046d8 	.word	0x080046d8

080019ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b0:	b088      	sub	sp, #32
 80019b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c8:	4bce      	ldr	r3, [pc, #824]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	f200 818d 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x344>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <HAL_RCC_GetSysClockFreq+0x30>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	08001a11 	.word	0x08001a11
 80019e0:	08001cf1 	.word	0x08001cf1
 80019e4:	08001cf1 	.word	0x08001cf1
 80019e8:	08001cf1 	.word	0x08001cf1
 80019ec:	08001a17 	.word	0x08001a17
 80019f0:	08001cf1 	.word	0x08001cf1
 80019f4:	08001cf1 	.word	0x08001cf1
 80019f8:	08001cf1 	.word	0x08001cf1
 80019fc:	08001a1d 	.word	0x08001a1d
 8001a00:	08001cf1 	.word	0x08001cf1
 8001a04:	08001cf1 	.word	0x08001cf1
 8001a08:	08001cf1 	.word	0x08001cf1
 8001a0c:	08001b91 	.word	0x08001b91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4bbd      	ldr	r3, [pc, #756]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a12:	61bb      	str	r3, [r7, #24]
       break;
 8001a14:	e16f      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a16:	4bbd      	ldr	r3, [pc, #756]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x360>)
 8001a18:	61bb      	str	r3, [r7, #24]
      break;
 8001a1a:	e16c      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4bb9      	ldr	r3, [pc, #740]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a26:	4bb7      	ldr	r3, [pc, #732]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d053      	beq.n	8001ada <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a32:	4bb4      	ldr	r3, [pc, #720]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	099b      	lsrs	r3, r3, #6
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	ea02 0400 	and.w	r4, r2, r0
 8001a4a:	603c      	str	r4, [r7, #0]
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a54:	4620      	mov	r0, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	014b      	lsls	r3, r1, #5
 8001a62:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a66:	0142      	lsls	r2, r0, #5
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	1ac0      	subs	r0, r0, r3
 8001a70:	462b      	mov	r3, r5
 8001a72:	eb61 0103 	sbc.w	r1, r1, r3
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	018b      	lsls	r3, r1, #6
 8001a80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a84:	0182      	lsls	r2, r0, #6
 8001a86:	1a12      	subs	r2, r2, r0
 8001a88:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	00d9      	lsls	r1, r3, #3
 8001a96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a9a:	00d0      	lsls	r0, r2, #3
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	1852      	adds	r2, r2, r1
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	eb43 0101 	adc.w	r1, r3, r1
 8001aaa:	460b      	mov	r3, r1
 8001aac:	f04f 0000 	mov.w	r0, #0
 8001ab0:	f04f 0100 	mov.w	r1, #0
 8001ab4:	0259      	lsls	r1, r3, #9
 8001ab6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001aba:	0250      	lsls	r0, r2, #9
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	f7fe fbf0 	bl	80002b0 <__aeabi_uldivmod>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	e04c      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ada:	4b8a      	ldr	r3, [pc, #552]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	ea02 0a00 	and.w	sl, r2, r0
 8001af2:	ea03 0b01 	and.w	fp, r3, r1
 8001af6:	4650      	mov	r0, sl
 8001af8:	4659      	mov	r1, fp
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	014b      	lsls	r3, r1, #5
 8001b04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b08:	0142      	lsls	r2, r0, #5
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	ebb0 000a 	subs.w	r0, r0, sl
 8001b12:	eb61 010b 	sbc.w	r1, r1, fp
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	018b      	lsls	r3, r1, #6
 8001b20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b24:	0182      	lsls	r2, r0, #6
 8001b26:	1a12      	subs	r2, r2, r0
 8001b28:	eb63 0301 	sbc.w	r3, r3, r1
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	00d9      	lsls	r1, r3, #3
 8001b36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b3a:	00d0      	lsls	r0, r2, #3
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	eb12 020a 	adds.w	r2, r2, sl
 8001b44:	eb43 030b 	adc.w	r3, r3, fp
 8001b48:	f04f 0000 	mov.w	r0, #0
 8001b4c:	f04f 0100 	mov.w	r1, #0
 8001b50:	0299      	lsls	r1, r3, #10
 8001b52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b56:	0290      	lsls	r0, r2, #10
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	f7fe fba2 	bl	80002b0 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b74:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	61bb      	str	r3, [r7, #24]
      break;
 8001b8e:	e0b2      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b90:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b98:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d04d      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba6:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	099b      	lsrs	r3, r3, #6
 8001bac:	461a      	mov	r2, r3
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bb6:	f04f 0100 	mov.w	r1, #0
 8001bba:	ea02 0800 	and.w	r8, r2, r0
 8001bbe:	ea03 0901 	and.w	r9, r3, r1
 8001bc2:	4640      	mov	r0, r8
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	014b      	lsls	r3, r1, #5
 8001bd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bd4:	0142      	lsls	r2, r0, #5
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	ebb0 0008 	subs.w	r0, r0, r8
 8001bde:	eb61 0109 	sbc.w	r1, r1, r9
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	018b      	lsls	r3, r1, #6
 8001bec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bf0:	0182      	lsls	r2, r0, #6
 8001bf2:	1a12      	subs	r2, r2, r0
 8001bf4:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	00d9      	lsls	r1, r3, #3
 8001c02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c06:	00d0      	lsls	r0, r2, #3
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	eb12 0208 	adds.w	r2, r2, r8
 8001c10:	eb43 0309 	adc.w	r3, r3, r9
 8001c14:	f04f 0000 	mov.w	r0, #0
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	0259      	lsls	r1, r3, #9
 8001c1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c22:	0250      	lsls	r0, r2, #9
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	f7fe fb3c 	bl	80002b0 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	e04a      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	099b      	lsrs	r3, r3, #6
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c52:	f04f 0100 	mov.w	r1, #0
 8001c56:	ea02 0400 	and.w	r4, r2, r0
 8001c5a:	ea03 0501 	and.w	r5, r3, r1
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4629      	mov	r1, r5
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	014b      	lsls	r3, r1, #5
 8001c6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c70:	0142      	lsls	r2, r0, #5
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	1b00      	subs	r0, r0, r4
 8001c78:	eb61 0105 	sbc.w	r1, r1, r5
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	018b      	lsls	r3, r1, #6
 8001c86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c8a:	0182      	lsls	r2, r0, #6
 8001c8c:	1a12      	subs	r2, r2, r0
 8001c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c92:	f04f 0000 	mov.w	r0, #0
 8001c96:	f04f 0100 	mov.w	r1, #0
 8001c9a:	00d9      	lsls	r1, r3, #3
 8001c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ca0:	00d0      	lsls	r0, r2, #3
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	1912      	adds	r2, r2, r4
 8001ca8:	eb45 0303 	adc.w	r3, r5, r3
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	0299      	lsls	r1, r3, #10
 8001cb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cba:	0290      	lsls	r0, r2, #10
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	f7fe faf0 	bl	80002b0 <__aeabi_uldivmod>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	0f1b      	lsrs	r3, r3, #28
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	61bb      	str	r3, [r7, #24]
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cf2:	61bb      	str	r3, [r7, #24]
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	007a1200 	.word	0x007a1200

08001d10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e28d      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8083 	beq.w	8001e36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d30:	4b94      	ldr	r3, [pc, #592]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d019      	beq.n	8001d70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d3c:	4b91      	ldr	r3, [pc, #580]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d48:	4b8e      	ldr	r3, [pc, #568]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d54:	d00c      	beq.n	8001d70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4b8b      	ldr	r3, [pc, #556]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d112      	bne.n	8001d88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	4b84      	ldr	r3, [pc, #528]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05b      	beq.n	8001e34 <HAL_RCC_OscConfig+0x124>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d157      	bne.n	8001e34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e25a      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d106      	bne.n	8001da0 <HAL_RCC_OscConfig+0x90>
 8001d92:	4b7c      	ldr	r3, [pc, #496]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7b      	ldr	r2, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e01d      	b.n	8001ddc <HAL_RCC_OscConfig+0xcc>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xb4>
 8001daa:	4b76      	ldr	r3, [pc, #472]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a75      	ldr	r2, [pc, #468]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a72      	ldr	r2, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xcc>
 8001dc4:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6e      	ldr	r2, [pc, #440]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b6c      	ldr	r3, [pc, #432]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a6b      	ldr	r2, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f9d8 	bl	8001198 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff f9d4 	bl	8001198 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e21f      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xdc>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f9c4 	bl	8001198 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff f9c0 	bl	8001198 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e20b      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x104>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d06f      	beq.n	8001f22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e42:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d017      	beq.n	8001e7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e4e:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d11c      	bne.n	8001eac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x186>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e1d3      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4937      	ldr	r1, [pc, #220]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	e03a      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <HAL_RCC_OscConfig+0x278>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7ff f96d 	bl	8001198 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f969 	bl	8001198 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1b4      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4925      	ldr	r1, [pc, #148]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_RCC_OscConfig+0x278>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f94c 	bl	8001198 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f04:	f7ff f948 	bl	8001198 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e193      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d036      	beq.n	8001f9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_RCC_OscConfig+0x27c>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff f92c 	bl	8001198 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff f928 	bl	8001198 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e173      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x234>
 8001f62:	e01b      	b.n	8001f9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_RCC_OscConfig+0x27c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6a:	f7ff f915 	bl	8001198 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	e00e      	b.n	8001f90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff f911 	bl	8001198 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d907      	bls.n	8001f90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e15c      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
 8001f84:	40023800 	.word	0x40023800
 8001f88:	42470000 	.word	0x42470000
 8001f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b8a      	ldr	r3, [pc, #552]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ea      	bne.n	8001f72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8097 	beq.w	80020d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b83      	ldr	r3, [pc, #524]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b7f      	ldr	r3, [pc, #508]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a7e      	ldr	r2, [pc, #504]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <HAL_RCC_OscConfig+0x4b0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_OscConfig+0x4b0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a75      	ldr	r2, [pc, #468]	; (80021c0 <HAL_RCC_OscConfig+0x4b0>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f8d1 	bl	8001198 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffa:	f7ff f8cd 	bl	8001198 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e118      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <HAL_RCC_OscConfig+0x4b0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x31e>
 8002020:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a65      	ldr	r2, [pc, #404]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
 800202c:	e01c      	b.n	8002068 <HAL_RCC_OscConfig+0x358>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x340>
 8002036:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	4a60      	ldr	r2, [pc, #384]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6713      	str	r3, [r2, #112]	; 0x70
 8002042:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6713      	str	r3, [r2, #112]	; 0x70
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0x358>
 8002050:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	4a59      	ldr	r2, [pc, #356]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
 800205c:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	4a56      	ldr	r2, [pc, #344]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002062:	f023 0304 	bic.w	r3, r3, #4
 8002066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d015      	beq.n	800209c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff f892 	bl	8001198 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7ff f88e 	bl	8001198 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0d7      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208e:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ee      	beq.n	8002078 <HAL_RCC_OscConfig+0x368>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7ff f87c 	bl	8001198 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7ff f878 	bl	8001198 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0c1      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ba:	4b40      	ldr	r3, [pc, #256]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ee      	bne.n	80020a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	4a3a      	ldr	r2, [pc, #232]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80ad 	beq.w	800223c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d060      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d145      	bne.n	8002182 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <HAL_RCC_OscConfig+0x4b4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff f84c 	bl	8001198 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff f848 	bl	8001198 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e093      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	3b01      	subs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	071b      	lsls	r3, r3, #28
 800214e:	491b      	ldr	r1, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x4b4>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff f81d 	bl	8001198 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff f819 	bl	8001198 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e064      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x452>
 8002180:	e05c      	b.n	800223c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x4b4>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f806 	bl	8001198 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff f802 	bl	8001198 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e04d      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x480>
 80021ae:	e045      	b.n	800223c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e040      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
 80021c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <HAL_RCC_OscConfig+0x538>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d030      	beq.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d129      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d122      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002200:	4293      	cmp	r3, r2
 8002202:	d119      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d10f      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d107      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e041      	b.n	80022e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fd60 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3304      	adds	r3, #4
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f000 feee 	bl	800306c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d001      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e04e      	b.n	80023a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d022      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x80>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232e:	d01d      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x80>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d018      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x80>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x80>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <HAL_TIM_Base_Start_IT+0xd0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00e      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x80>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d009      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x80>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d004      	beq.n	800236c <HAL_TIM_Base_Start_IT+0x80>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d111      	bne.n	8002390 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b06      	cmp	r3, #6
 800237c:	d010      	beq.n	80023a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	e007      	b.n	80023a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40000c00 	.word	0x40000c00
 80023c0:	40010400 	.word	0x40010400
 80023c4:	40014000 	.word	0x40014000
 80023c8:	40001800 	.word	0x40001800

080023cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10f      	bne.n	8002414 <HAL_TIM_Base_Stop_IT+0x48>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	f240 4344 	movw	r3, #1092	; 0x444
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_TIM_Base_Stop_IT+0x48>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e041      	b.n	80024c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f839 	bl	80024c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f000 fdff 	bl	800306c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_TIM_PWM_Start+0x24>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e022      	b.n	8002546 <HAL_TIM_PWM_Start+0x6a>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b04      	cmp	r3, #4
 8002504:	d109      	bne.n	800251a <HAL_TIM_PWM_Start+0x3e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e015      	b.n	8002546 <HAL_TIM_PWM_Start+0x6a>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d109      	bne.n	8002534 <HAL_TIM_PWM_Start+0x58>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e008      	b.n	8002546 <HAL_TIM_PWM_Start+0x6a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e07c      	b.n	8002648 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_TIM_PWM_Start+0x82>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800255c:	e013      	b.n	8002586 <HAL_TIM_PWM_Start+0xaa>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d104      	bne.n	800256e <HAL_TIM_PWM_Start+0x92>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800256c:	e00b      	b.n	8002586 <HAL_TIM_PWM_Start+0xaa>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Start+0xa2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800257c:	e003      	b.n	8002586 <HAL_TIM_PWM_Start+0xaa>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f001 f856 	bl	8003640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <HAL_TIM_PWM_Start+0x174>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_TIM_PWM_Start+0xcc>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <HAL_TIM_PWM_Start+0x178>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d101      	bne.n	80025ac <HAL_TIM_PWM_Start+0xd0>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_TIM_PWM_Start+0xd2>
 80025ac:	2300      	movs	r3, #0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a22      	ldr	r2, [pc, #136]	; (8002650 <HAL_TIM_PWM_Start+0x174>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d022      	beq.n	8002612 <HAL_TIM_PWM_Start+0x136>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d01d      	beq.n	8002612 <HAL_TIM_PWM_Start+0x136>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_TIM_PWM_Start+0x17c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d018      	beq.n	8002612 <HAL_TIM_PWM_Start+0x136>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <HAL_TIM_PWM_Start+0x180>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_TIM_PWM_Start+0x136>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_TIM_PWM_Start+0x184>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00e      	beq.n	8002612 <HAL_TIM_PWM_Start+0x136>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a16      	ldr	r2, [pc, #88]	; (8002654 <HAL_TIM_PWM_Start+0x178>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_TIM_PWM_Start+0x136>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_TIM_PWM_Start+0x188>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d004      	beq.n	8002612 <HAL_TIM_PWM_Start+0x136>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a16      	ldr	r2, [pc, #88]	; (8002668 <HAL_TIM_PWM_Start+0x18c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d111      	bne.n	8002636 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b06      	cmp	r3, #6
 8002622:	d010      	beq.n	8002646 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002634:	e007      	b.n	8002646 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40010000 	.word	0x40010000
 8002654:	40010400 	.word	0x40010400
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800
 8002660:	40000c00 	.word	0x40000c00
 8002664:	40014000 	.word	0x40014000
 8002668:	40001800 	.word	0x40001800

0800266c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	6839      	ldr	r1, [r7, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 ffde 	bl	8003640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2e      	ldr	r2, [pc, #184]	; (8002744 <HAL_TIM_PWM_Stop+0xd8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_TIM_PWM_Stop+0x2c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <HAL_TIM_PWM_Stop+0xdc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_TIM_PWM_Stop+0x30>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_TIM_PWM_Stop+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d017      	beq.n	80026d2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a1a      	ldr	r2, [r3, #32]
 80026a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_TIM_PWM_Stop+0x66>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1a      	ldr	r2, [r3, #32]
 80026b8:	f240 4344 	movw	r3, #1092	; 0x444
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_TIM_PWM_Stop+0x66>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <HAL_TIM_PWM_Stop+0x96>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	f240 4344 	movw	r3, #1092	; 0x444
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d107      	bne.n	8002702 <HAL_TIM_PWM_Stop+0x96>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_TIM_PWM_Stop+0xa6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002710:	e013      	b.n	800273a <HAL_TIM_PWM_Stop+0xce>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d104      	bne.n	8002722 <HAL_TIM_PWM_Stop+0xb6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002720:	e00b      	b.n	800273a <HAL_TIM_PWM_Stop+0xce>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d104      	bne.n	8002732 <HAL_TIM_PWM_Stop+0xc6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002730:	e003      	b.n	800273a <HAL_TIM_PWM_Stop+0xce>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40010000 	.word	0x40010000
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e097      	b.n	8002890 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d106      	bne.n	800277a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fe fa97 	bl	8000ca8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2202      	movs	r2, #2
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002790:	f023 0307 	bic.w	r3, r3, #7
 8002794:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f000 fc63 	bl	800306c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	4313      	orrs	r3, r2
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027ec:	f023 030c 	bic.w	r3, r3, #12
 80027f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	4313      	orrs	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	011a      	lsls	r2, r3, #4
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	031b      	lsls	r3, r3, #12
 800281c:	4313      	orrs	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800282a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	4313      	orrs	r3, r2
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d110      	bne.n	80028ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80028ce:	7b7b      	ldrb	r3, [r7, #13]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d001      	beq.n	80028d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e069      	b.n	80029ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e8:	e031      	b.n	800294e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d110      	bne.n	8002912 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80028f0:	7bbb      	ldrb	r3, [r7, #14]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80028f6:	7b3b      	ldrb	r3, [r7, #12]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d001      	beq.n	8002900 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e055      	b.n	80029ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002910:	e01d      	b.n	800294e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d108      	bne.n	800292a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800291e:	7b7b      	ldrb	r3, [r7, #13]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002924:	7b3b      	ldrb	r3, [r7, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e03e      	b.n	80029ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2202      	movs	r2, #2
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_TIM_Encoder_Start+0xc4>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b04      	cmp	r3, #4
 8002958:	d008      	beq.n	800296c <HAL_TIM_Encoder_Start+0xd4>
 800295a:	e00f      	b.n	800297c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fe6b 	bl	8003640 <TIM_CCxChannelCmd>
      break;
 800296a:	e016      	b.n	800299a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2201      	movs	r2, #1
 8002972:	2104      	movs	r1, #4
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fe63 	bl	8003640 <TIM_CCxChannelCmd>
      break;
 800297a:	e00e      	b.n	800299a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fe5b 	bl	8003640 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2201      	movs	r2, #1
 8002990:	2104      	movs	r1, #4
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fe54 	bl	8003640 <TIM_CCxChannelCmd>
      break;
 8002998:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_TIM_Encoder_Stop+0x18>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d008      	beq.n	80029dc <HAL_TIM_Encoder_Stop+0x28>
 80029ca:	e00f      	b.n	80029ec <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fe33 	bl	8003640 <TIM_CCxChannelCmd>
      break;
 80029da:	e016      	b.n	8002a0a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2104      	movs	r1, #4
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fe2b 	bl	8003640 <TIM_CCxChannelCmd>
      break;
 80029ea:	e00e      	b.n	8002a0a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fe23 	bl	8003640 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	2104      	movs	r1, #4
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fe1c 	bl	8003640 <TIM_CCxChannelCmd>
      break;
 8002a08:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_TIM_Encoder_Stop+0x86>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	f240 4344 	movw	r3, #1092	; 0x444
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_TIM_Encoder_Stop+0x86>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_TIM_Encoder_Stop+0x92>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d138      	bne.n	8002ab8 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_Encoder_Stop+0xa2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a54:	e013      	b.n	8002a7e <HAL_TIM_Encoder_Stop+0xca>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_Encoder_Stop+0xb2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	e00b      	b.n	8002a7e <HAL_TIM_Encoder_Stop+0xca>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_Encoder_Stop+0xc2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a74:	e003      	b.n	8002a7e <HAL_TIM_Encoder_Stop+0xca>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <HAL_TIM_Encoder_Stop+0xda>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a8c:	e024      	b.n	8002ad8 <HAL_TIM_Encoder_Stop+0x124>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d104      	bne.n	8002a9e <HAL_TIM_Encoder_Stop+0xea>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a9c:	e01c      	b.n	8002ad8 <HAL_TIM_Encoder_Stop+0x124>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d104      	bne.n	8002aae <HAL_TIM_Encoder_Stop+0xfa>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aac:	e014      	b.n	8002ad8 <HAL_TIM_Encoder_Stop+0x124>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab6:	e00f      	b.n	8002ad8 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d122      	bne.n	8002b3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d11b      	bne.n	8002b3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f06f 0202 	mvn.w	r2, #2
 8002b0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fa82 	bl	800302e <HAL_TIM_IC_CaptureCallback>
 8002b2a:	e005      	b.n	8002b38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fa74 	bl	800301a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa85 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d122      	bne.n	8002b92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d11b      	bne.n	8002b92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f06f 0204 	mvn.w	r2, #4
 8002b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fa58 	bl	800302e <HAL_TIM_IC_CaptureCallback>
 8002b7e:	e005      	b.n	8002b8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fa4a 	bl	800301a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa5b 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d122      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d11b      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f06f 0208 	mvn.w	r2, #8
 8002bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fa2e 	bl	800302e <HAL_TIM_IC_CaptureCallback>
 8002bd2:	e005      	b.n	8002be0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fa20 	bl	800301a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa31 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d122      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d11b      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f06f 0210 	mvn.w	r2, #16
 8002c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2208      	movs	r2, #8
 8002c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fa04 	bl	800302e <HAL_TIM_IC_CaptureCallback>
 8002c26:	e005      	b.n	8002c34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f9f6 	bl	800301a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa07 	bl	8003042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d10e      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0201 	mvn.w	r2, #1
 8002c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f9d0 	bl	8003006 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d10e      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d107      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fd83 	bl	8003798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d10e      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d107      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f9cc 	bl	8003056 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d10e      	bne.n	8002cea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d107      	bne.n	8002cea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0220 	mvn.w	r2, #32
 8002ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fd4d 	bl	8003784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e0ae      	b.n	8002e70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	f200 809f 	bhi.w	8002e60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d5d 	.word	0x08002d5d
 8002d2c:	08002e61 	.word	0x08002e61
 8002d30:	08002e61 	.word	0x08002e61
 8002d34:	08002e61 	.word	0x08002e61
 8002d38:	08002d9d 	.word	0x08002d9d
 8002d3c:	08002e61 	.word	0x08002e61
 8002d40:	08002e61 	.word	0x08002e61
 8002d44:	08002e61 	.word	0x08002e61
 8002d48:	08002ddf 	.word	0x08002ddf
 8002d4c:	08002e61 	.word	0x08002e61
 8002d50:	08002e61 	.word	0x08002e61
 8002d54:	08002e61 	.word	0x08002e61
 8002d58:	08002e1f 	.word	0x08002e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fa22 	bl	80031ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0208 	orr.w	r2, r2, #8
 8002d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0204 	bic.w	r2, r2, #4
 8002d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6999      	ldr	r1, [r3, #24]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	619a      	str	r2, [r3, #24]
      break;
 8002d9a:	e064      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fa72 	bl	800328c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6999      	ldr	r1, [r3, #24]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	021a      	lsls	r2, r3, #8
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	619a      	str	r2, [r3, #24]
      break;
 8002ddc:	e043      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fac7 	bl	8003378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0208 	orr.w	r2, r2, #8
 8002df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0204 	bic.w	r2, r2, #4
 8002e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69d9      	ldr	r1, [r3, #28]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
      break;
 8002e1c:	e023      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fb1b 	bl	8003460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69d9      	ldr	r1, [r3, #28]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	021a      	lsls	r2, r3, #8
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	61da      	str	r2, [r3, #28]
      break;
 8002e5e:	e002      	b.n	8002e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
      break;
 8002e64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIM_ConfigClockSource+0x1c>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e0b4      	b.n	8002ffe <HAL_TIM_ConfigClockSource+0x186>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ecc:	d03e      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0xd4>
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	f200 8087 	bhi.w	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	f000 8086 	beq.w	8002fea <HAL_TIM_ConfigClockSource+0x172>
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d87f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d01a      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0xa6>
 8002ee8:	2b70      	cmp	r3, #112	; 0x70
 8002eea:	d87b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b60      	cmp	r3, #96	; 0x60
 8002eee:	d050      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x11a>
 8002ef0:	2b60      	cmp	r3, #96	; 0x60
 8002ef2:	d877      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b50      	cmp	r3, #80	; 0x50
 8002ef6:	d03c      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0xfa>
 8002ef8:	2b50      	cmp	r3, #80	; 0x50
 8002efa:	d873      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d058      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d86f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b30      	cmp	r3, #48	; 0x30
 8002f06:	d064      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	2b30      	cmp	r3, #48	; 0x30
 8002f0a:	d86b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d060      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d867      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05c      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d05a      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f1c:	e062      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f000 fb67 	bl	8003600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	609a      	str	r2, [r3, #8]
      break;
 8002f4a:	e04f      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f000 fb50 	bl	8003600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6e:	609a      	str	r2, [r3, #8]
      break;
 8002f70:	e03c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 fac4 	bl	800350c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2150      	movs	r1, #80	; 0x50
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fb1d 	bl	80035ca <TIM_ITRx_SetConfig>
      break;
 8002f90:	e02c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 fae3 	bl	800356a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2160      	movs	r1, #96	; 0x60
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fb0d 	bl	80035ca <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e01c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f000 faa4 	bl	800350c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fafd 	bl	80035ca <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e00c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 faf4 	bl	80035ca <TIM_ITRx_SetConfig>
      break;
 8002fe2:	e003      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe8:	e000      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a40      	ldr	r2, [pc, #256]	; (8003180 <TIM_Base_SetConfig+0x114>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d013      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308a:	d00f      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3d      	ldr	r2, [pc, #244]	; (8003184 <TIM_Base_SetConfig+0x118>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00b      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a3c      	ldr	r2, [pc, #240]	; (8003188 <TIM_Base_SetConfig+0x11c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d007      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a3b      	ldr	r2, [pc, #236]	; (800318c <TIM_Base_SetConfig+0x120>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a3a      	ldr	r2, [pc, #232]	; (8003190 <TIM_Base_SetConfig+0x124>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d108      	bne.n	80030be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2f      	ldr	r2, [pc, #188]	; (8003180 <TIM_Base_SetConfig+0x114>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d02b      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d027      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <TIM_Base_SetConfig+0x118>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d023      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <TIM_Base_SetConfig+0x11c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01f      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2a      	ldr	r2, [pc, #168]	; (800318c <TIM_Base_SetConfig+0x120>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01b      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a29      	ldr	r2, [pc, #164]	; (8003190 <TIM_Base_SetConfig+0x124>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d017      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a28      	ldr	r2, [pc, #160]	; (8003194 <TIM_Base_SetConfig+0x128>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <TIM_Base_SetConfig+0x12c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00f      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a26      	ldr	r2, [pc, #152]	; (800319c <TIM_Base_SetConfig+0x130>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00b      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <TIM_Base_SetConfig+0x134>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <TIM_Base_SetConfig+0x138>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <TIM_Base_SetConfig+0x13c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <TIM_Base_SetConfig+0x114>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0xf8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0c      	ldr	r2, [pc, #48]	; (8003190 <TIM_Base_SetConfig+0x124>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	615a      	str	r2, [r3, #20]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40010000 	.word	0x40010000
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800
 800318c:	40000c00 	.word	0x40000c00
 8003190:	40010400 	.word	0x40010400
 8003194:	40014000 	.word	0x40014000
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800
 80031a0:	40001800 	.word	0x40001800
 80031a4:	40001c00 	.word	0x40001c00
 80031a8:	40002000 	.word	0x40002000

080031ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f023 0201 	bic.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 0302 	bic.w	r3, r3, #2
 80031f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a20      	ldr	r2, [pc, #128]	; (8003284 <TIM_OC1_SetConfig+0xd8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_OC1_SetConfig+0x64>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <TIM_OC1_SetConfig+0xdc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10c      	bne.n	800322a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0308 	bic.w	r3, r3, #8
 8003216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a15      	ldr	r2, [pc, #84]	; (8003284 <TIM_OC1_SetConfig+0xd8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d003      	beq.n	800323a <TIM_OC1_SetConfig+0x8e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <TIM_OC1_SetConfig+0xdc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d111      	bne.n	800325e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	621a      	str	r2, [r3, #32]
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40010000 	.word	0x40010000
 8003288:	40010400 	.word	0x40010400

0800328c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f023 0210 	bic.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0320 	bic.w	r3, r3, #32
 80032d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <TIM_OC2_SetConfig+0xe4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_OC2_SetConfig+0x68>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a21      	ldr	r2, [pc, #132]	; (8003374 <TIM_OC2_SetConfig+0xe8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10d      	bne.n	8003310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a17      	ldr	r2, [pc, #92]	; (8003370 <TIM_OC2_SetConfig+0xe4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_OC2_SetConfig+0x94>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <TIM_OC2_SetConfig+0xe8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d113      	bne.n	8003348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40010400 	.word	0x40010400

08003378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a21      	ldr	r2, [pc, #132]	; (8003458 <TIM_OC3_SetConfig+0xe0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_OC3_SetConfig+0x66>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a20      	ldr	r2, [pc, #128]	; (800345c <TIM_OC3_SetConfig+0xe4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d10d      	bne.n	80033fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a16      	ldr	r2, [pc, #88]	; (8003458 <TIM_OC3_SetConfig+0xe0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d003      	beq.n	800340a <TIM_OC3_SetConfig+0x92>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a15      	ldr	r2, [pc, #84]	; (800345c <TIM_OC3_SetConfig+0xe4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d113      	bne.n	8003432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	621a      	str	r2, [r3, #32]
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40010000 	.word	0x40010000
 800345c:	40010400 	.word	0x40010400

08003460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	031b      	lsls	r3, r3, #12
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a12      	ldr	r2, [pc, #72]	; (8003504 <TIM_OC4_SetConfig+0xa4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_OC4_SetConfig+0x68>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a11      	ldr	r2, [pc, #68]	; (8003508 <TIM_OC4_SetConfig+0xa8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d109      	bne.n	80034dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40010000 	.word	0x40010000
 8003508:	40010400 	.word	0x40010400

0800350c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0201 	bic.w	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f023 030a 	bic.w	r3, r3, #10
 8003548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800356a:	b480      	push	{r7}
 800356c:	b087      	sub	sp, #28
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0210 	bic.w	r2, r3, #16
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	031b      	lsls	r3, r3, #12
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f043 0307 	orr.w	r3, r3, #7
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800361a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	431a      	orrs	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	609a      	str	r2, [r3, #8]
}
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2201      	movs	r2, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	43db      	mvns	r3, r3
 8003662:	401a      	ands	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a1a      	ldr	r2, [r3, #32]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e05a      	b.n	800375a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d01d      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1d      	ldr	r2, [pc, #116]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d018      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1a      	ldr	r2, [pc, #104]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a18      	ldr	r2, [pc, #96]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a17      	ldr	r2, [pc, #92]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a15      	ldr	r2, [pc, #84]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10c      	bne.n	8003748 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4313      	orrs	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40010000 	.word	0x40010000
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800
 8003774:	40000c00 	.word	0x40000c00
 8003778:	40010400 	.word	0x40010400
 800377c:	40014000 	.word	0x40014000
 8003780:	40001800 	.word	0x40001800

08003784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e03f      	b.n	800383e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd fb26 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2224      	movs	r2, #36	; 0x24
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f929 	bl	8003a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b08a      	sub	sp, #40	; 0x28
 800384a:	af02      	add	r7, sp, #8
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	d17c      	bne.n	8003960 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_UART_Transmit+0x2c>
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e075      	b.n	8003962 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_UART_Transmit+0x3e>
 8003880:	2302      	movs	r3, #2
 8003882:	e06e      	b.n	8003962 <HAL_UART_Transmit+0x11c>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2221      	movs	r2, #33	; 0x21
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389a:	f7fd fc7d 	bl	8001198 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d108      	bne.n	80038c8 <HAL_UART_Transmit+0x82>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e003      	b.n	80038d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038d8:	e02a      	b.n	8003930 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f840 	bl	800396a <UART_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e036      	b.n	8003962 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3302      	adds	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e007      	b.n	8003922 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1cf      	bne.n	80038da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	2140      	movs	r1, #64	; 0x40
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f810 	bl	800396a <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e006      	b.n	8003962 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b090      	sub	sp, #64	; 0x40
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397a:	e050      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d04c      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <UART_WaitOnFlagUntilTimeout+0x30>
 800398a:	f7fd fc05 	bl	8001198 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003996:	429a      	cmp	r2, r3
 8003998:	d241      	bcs.n	8003a1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ba:	637a      	str	r2, [r7, #52]	; 0x34
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e5      	bne.n	800399a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	613b      	str	r3, [r7, #16]
   return(result);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3314      	adds	r3, #20
 80039ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ee:	623a      	str	r2, [r7, #32]
 80039f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	69f9      	ldr	r1, [r7, #28]
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e5      	bne.n	80039ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e00f      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d09f      	beq.n	800397c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3740      	adds	r7, #64	; 0x40
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	b09f      	sub	sp, #124	; 0x7c
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5e:	68d9      	ldr	r1, [r3, #12]
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	ea40 0301 	orr.w	r3, r0, r1
 8003a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a8c:	f021 010c 	bic.w	r1, r1, #12
 8003a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a96:	430b      	orrs	r3, r1
 8003a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	6999      	ldr	r1, [r3, #24]
 8003aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	ea40 0301 	orr.w	r3, r0, r1
 8003ab0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4bc5      	ldr	r3, [pc, #788]	; (8003dcc <UART_SetConfig+0x384>)
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d004      	beq.n	8003ac6 <UART_SetConfig+0x7e>
 8003abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4bc3      	ldr	r3, [pc, #780]	; (8003dd0 <UART_SetConfig+0x388>)
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d103      	bne.n	8003ace <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ac6:	f7fd ff5d 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8003aca:	6778      	str	r0, [r7, #116]	; 0x74
 8003acc:	e002      	b.n	8003ad4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fd ff45 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 8003ad2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003adc:	f040 80b6 	bne.w	8003c4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae2:	461c      	mov	r4, r3
 8003ae4:	f04f 0500 	mov.w	r5, #0
 8003ae8:	4622      	mov	r2, r4
 8003aea:	462b      	mov	r3, r5
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	6439      	str	r1, [r7, #64]	; 0x40
 8003af0:	415b      	adcs	r3, r3
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
 8003af4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003af8:	1912      	adds	r2, r2, r4
 8003afa:	eb45 0303 	adc.w	r3, r5, r3
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	00d9      	lsls	r1, r3, #3
 8003b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b0c:	00d0      	lsls	r0, r2, #3
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	1911      	adds	r1, r2, r4
 8003b14:	6639      	str	r1, [r7, #96]	; 0x60
 8003b16:	416b      	adcs	r3, r5
 8003b18:	667b      	str	r3, [r7, #100]	; 0x64
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b34:	f7fc fbbc 	bl	80002b0 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4ba5      	ldr	r3, [pc, #660]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	011e      	lsls	r6, r3, #4
 8003b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b48:	461c      	mov	r4, r3
 8003b4a:	f04f 0500 	mov.w	r5, #0
 8003b4e:	4622      	mov	r2, r4
 8003b50:	462b      	mov	r3, r5
 8003b52:	1891      	adds	r1, r2, r2
 8003b54:	6339      	str	r1, [r7, #48]	; 0x30
 8003b56:	415b      	adcs	r3, r3
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b5e:	1912      	adds	r2, r2, r4
 8003b60:	eb45 0303 	adc.w	r3, r5, r3
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	00d9      	lsls	r1, r3, #3
 8003b6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b72:	00d0      	lsls	r0, r2, #3
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	1911      	adds	r1, r2, r4
 8003b7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b7c:	416b      	adcs	r3, r5
 8003b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	461a      	mov	r2, r3
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	1891      	adds	r1, r2, r2
 8003b8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b8e:	415b      	adcs	r3, r3
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b9a:	f7fc fb89 	bl	80002b0 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4b8c      	ldr	r3, [pc, #560]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	2164      	movs	r1, #100	; 0x64
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	3332      	adds	r3, #50	; 0x32
 8003bb6:	4a87      	ldr	r2, [pc, #540]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bc4:	441e      	add	r6, r3
 8003bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f04f 0100 	mov.w	r1, #0
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	1894      	adds	r4, r2, r2
 8003bd4:	623c      	str	r4, [r7, #32]
 8003bd6:	415b      	adcs	r3, r3
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bde:	1812      	adds	r2, r2, r0
 8003be0:	eb41 0303 	adc.w	r3, r1, r3
 8003be4:	f04f 0400 	mov.w	r4, #0
 8003be8:	f04f 0500 	mov.w	r5, #0
 8003bec:	00dd      	lsls	r5, r3, #3
 8003bee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bf2:	00d4      	lsls	r4, r2, #3
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	1814      	adds	r4, r2, r0
 8003bfa:	653c      	str	r4, [r7, #80]	; 0x50
 8003bfc:	414b      	adcs	r3, r1
 8003bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8003c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	1891      	adds	r1, r2, r2
 8003c0c:	61b9      	str	r1, [r7, #24]
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c1a:	f7fc fb49 	bl	80002b0 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003c24:	fba3 1302 	umull	r1, r3, r3, r2
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	2164      	movs	r1, #100	; 0x64
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	3332      	adds	r3, #50	; 0x32
 8003c36:	4a67      	ldr	r2, [pc, #412]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	f003 0207 	and.w	r2, r3, #7
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4432      	add	r2, r6
 8003c48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c4a:	e0b9      	b.n	8003dc0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4e:	461c      	mov	r4, r3
 8003c50:	f04f 0500 	mov.w	r5, #0
 8003c54:	4622      	mov	r2, r4
 8003c56:	462b      	mov	r3, r5
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	6139      	str	r1, [r7, #16]
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c64:	1912      	adds	r2, r2, r4
 8003c66:	eb45 0303 	adc.w	r3, r5, r3
 8003c6a:	f04f 0000 	mov.w	r0, #0
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	00d9      	lsls	r1, r3, #3
 8003c74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c78:	00d0      	lsls	r0, r2, #3
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	eb12 0804 	adds.w	r8, r2, r4
 8003c82:	eb43 0905 	adc.w	r9, r3, r5
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	008b      	lsls	r3, r1, #2
 8003c9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c9e:	0082      	lsls	r2, r0, #2
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	f7fc fb04 	bl	80002b0 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003cae:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	011e      	lsls	r6, r3, #4
 8003cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	1894      	adds	r4, r2, r2
 8003cc4:	60bc      	str	r4, [r7, #8]
 8003cc6:	415b      	adcs	r3, r3
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cce:	1812      	adds	r2, r2, r0
 8003cd0:	eb41 0303 	adc.w	r3, r1, r3
 8003cd4:	f04f 0400 	mov.w	r4, #0
 8003cd8:	f04f 0500 	mov.w	r5, #0
 8003cdc:	00dd      	lsls	r5, r3, #3
 8003cde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ce2:	00d4      	lsls	r4, r2, #3
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	462b      	mov	r3, r5
 8003ce8:	1814      	adds	r4, r2, r0
 8003cea:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cec:	414b      	adcs	r3, r1
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	008b      	lsls	r3, r1, #2
 8003d04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d08:	0082      	lsls	r2, r0, #2
 8003d0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d0e:	f7fc facf 	bl	80002b0 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003d18:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	2164      	movs	r1, #100	; 0x64
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	3332      	adds	r3, #50	; 0x32
 8003d2a:	4a2a      	ldr	r2, [pc, #168]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d36:	441e      	add	r6, r3
 8003d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	1894      	adds	r4, r2, r2
 8003d46:	603c      	str	r4, [r7, #0]
 8003d48:	415b      	adcs	r3, r3
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d50:	1812      	adds	r2, r2, r0
 8003d52:	eb41 0303 	adc.w	r3, r1, r3
 8003d56:	f04f 0400 	mov.w	r4, #0
 8003d5a:	f04f 0500 	mov.w	r5, #0
 8003d5e:	00dd      	lsls	r5, r3, #3
 8003d60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d64:	00d4      	lsls	r4, r2, #3
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	eb12 0a00 	adds.w	sl, r2, r0
 8003d6e:	eb43 0b01 	adc.w	fp, r3, r1
 8003d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	008b      	lsls	r3, r1, #2
 8003d86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d8a:	0082      	lsls	r2, r0, #2
 8003d8c:	4650      	mov	r0, sl
 8003d8e:	4659      	mov	r1, fp
 8003d90:	f7fc fa8e 	bl	80002b0 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2164      	movs	r1, #100	; 0x64
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	3332      	adds	r3, #50	; 0x32
 8003dac:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <UART_SetConfig+0x38c>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4432      	add	r2, r6
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	377c      	adds	r7, #124	; 0x7c
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	40011000 	.word	0x40011000
 8003dd0:	40011400 	.word	0x40011400
 8003dd4:	51eb851f 	.word	0x51eb851f

08003dd8 <__errno>:
 8003dd8:	4b01      	ldr	r3, [pc, #4]	; (8003de0 <__errno+0x8>)
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	2000000c 	.word	0x2000000c

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4d0d      	ldr	r5, [pc, #52]	; (8003e1c <__libc_init_array+0x38>)
 8003de8:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dea:	1b64      	subs	r4, r4, r5
 8003dec:	10a4      	asrs	r4, r4, #2
 8003dee:	2600      	movs	r6, #0
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	4d0b      	ldr	r5, [pc, #44]	; (8003e24 <__libc_init_array+0x40>)
 8003df6:	4c0c      	ldr	r4, [pc, #48]	; (8003e28 <__libc_init_array+0x44>)
 8003df8:	f000 fc4e 	bl	8004698 <_init>
 8003dfc:	1b64      	subs	r4, r4, r5
 8003dfe:	10a4      	asrs	r4, r4, #2
 8003e00:	2600      	movs	r6, #0
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	0800471c 	.word	0x0800471c
 8003e20:	0800471c 	.word	0x0800471c
 8003e24:	0800471c 	.word	0x0800471c
 8003e28:	08004720 	.word	0x08004720

08003e2c <memset>:
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <siprintf>:
 8003e3c:	b40e      	push	{r1, r2, r3}
 8003e3e:	b500      	push	{lr}
 8003e40:	b09c      	sub	sp, #112	; 0x70
 8003e42:	ab1d      	add	r3, sp, #116	; 0x74
 8003e44:	9002      	str	r0, [sp, #8]
 8003e46:	9006      	str	r0, [sp, #24]
 8003e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e4c:	4809      	ldr	r0, [pc, #36]	; (8003e74 <siprintf+0x38>)
 8003e4e:	9107      	str	r1, [sp, #28]
 8003e50:	9104      	str	r1, [sp, #16]
 8003e52:	4909      	ldr	r1, [pc, #36]	; (8003e78 <siprintf+0x3c>)
 8003e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e58:	9105      	str	r1, [sp, #20]
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	a902      	add	r1, sp, #8
 8003e60:	f000 f868 	bl	8003f34 <_svfiprintf_r>
 8003e64:	9b02      	ldr	r3, [sp, #8]
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	b01c      	add	sp, #112	; 0x70
 8003e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e70:	b003      	add	sp, #12
 8003e72:	4770      	bx	lr
 8003e74:	2000000c 	.word	0x2000000c
 8003e78:	ffff0208 	.word	0xffff0208

08003e7c <__ssputs_r>:
 8003e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e80:	688e      	ldr	r6, [r1, #8]
 8003e82:	429e      	cmp	r6, r3
 8003e84:	4682      	mov	sl, r0
 8003e86:	460c      	mov	r4, r1
 8003e88:	4690      	mov	r8, r2
 8003e8a:	461f      	mov	r7, r3
 8003e8c:	d838      	bhi.n	8003f00 <__ssputs_r+0x84>
 8003e8e:	898a      	ldrh	r2, [r1, #12]
 8003e90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e94:	d032      	beq.n	8003efc <__ssputs_r+0x80>
 8003e96:	6825      	ldr	r5, [r4, #0]
 8003e98:	6909      	ldr	r1, [r1, #16]
 8003e9a:	eba5 0901 	sub.w	r9, r5, r1
 8003e9e:	6965      	ldr	r5, [r4, #20]
 8003ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	444b      	add	r3, r9
 8003eac:	106d      	asrs	r5, r5, #1
 8003eae:	429d      	cmp	r5, r3
 8003eb0:	bf38      	it	cc
 8003eb2:	461d      	movcc	r5, r3
 8003eb4:	0553      	lsls	r3, r2, #21
 8003eb6:	d531      	bpl.n	8003f1c <__ssputs_r+0xa0>
 8003eb8:	4629      	mov	r1, r5
 8003eba:	f000 fb47 	bl	800454c <_malloc_r>
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	b950      	cbnz	r0, 8003ed8 <__ssputs_r+0x5c>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	f8ca 3000 	str.w	r3, [sl]
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ece:	81a3      	strh	r3, [r4, #12]
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed8:	6921      	ldr	r1, [r4, #16]
 8003eda:	464a      	mov	r2, r9
 8003edc:	f000 fabe 	bl	800445c <memcpy>
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	6126      	str	r6, [r4, #16]
 8003eee:	6165      	str	r5, [r4, #20]
 8003ef0:	444e      	add	r6, r9
 8003ef2:	eba5 0509 	sub.w	r5, r5, r9
 8003ef6:	6026      	str	r6, [r4, #0]
 8003ef8:	60a5      	str	r5, [r4, #8]
 8003efa:	463e      	mov	r6, r7
 8003efc:	42be      	cmp	r6, r7
 8003efe:	d900      	bls.n	8003f02 <__ssputs_r+0x86>
 8003f00:	463e      	mov	r6, r7
 8003f02:	4632      	mov	r2, r6
 8003f04:	6820      	ldr	r0, [r4, #0]
 8003f06:	4641      	mov	r1, r8
 8003f08:	f000 fab6 	bl	8004478 <memmove>
 8003f0c:	68a3      	ldr	r3, [r4, #8]
 8003f0e:	6822      	ldr	r2, [r4, #0]
 8003f10:	1b9b      	subs	r3, r3, r6
 8003f12:	4432      	add	r2, r6
 8003f14:	60a3      	str	r3, [r4, #8]
 8003f16:	6022      	str	r2, [r4, #0]
 8003f18:	2000      	movs	r0, #0
 8003f1a:	e7db      	b.n	8003ed4 <__ssputs_r+0x58>
 8003f1c:	462a      	mov	r2, r5
 8003f1e:	f000 fb6f 	bl	8004600 <_realloc_r>
 8003f22:	4606      	mov	r6, r0
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d1e1      	bne.n	8003eec <__ssputs_r+0x70>
 8003f28:	6921      	ldr	r1, [r4, #16]
 8003f2a:	4650      	mov	r0, sl
 8003f2c:	f000 fabe 	bl	80044ac <_free_r>
 8003f30:	e7c7      	b.n	8003ec2 <__ssputs_r+0x46>
	...

08003f34 <_svfiprintf_r>:
 8003f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	4698      	mov	r8, r3
 8003f3a:	898b      	ldrh	r3, [r1, #12]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	b09d      	sub	sp, #116	; 0x74
 8003f40:	4607      	mov	r7, r0
 8003f42:	460d      	mov	r5, r1
 8003f44:	4614      	mov	r4, r2
 8003f46:	d50e      	bpl.n	8003f66 <_svfiprintf_r+0x32>
 8003f48:	690b      	ldr	r3, [r1, #16]
 8003f4a:	b963      	cbnz	r3, 8003f66 <_svfiprintf_r+0x32>
 8003f4c:	2140      	movs	r1, #64	; 0x40
 8003f4e:	f000 fafd 	bl	800454c <_malloc_r>
 8003f52:	6028      	str	r0, [r5, #0]
 8003f54:	6128      	str	r0, [r5, #16]
 8003f56:	b920      	cbnz	r0, 8003f62 <_svfiprintf_r+0x2e>
 8003f58:	230c      	movs	r3, #12
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f60:	e0d1      	b.n	8004106 <_svfiprintf_r+0x1d2>
 8003f62:	2340      	movs	r3, #64	; 0x40
 8003f64:	616b      	str	r3, [r5, #20]
 8003f66:	2300      	movs	r3, #0
 8003f68:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f74:	2330      	movs	r3, #48	; 0x30
 8003f76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004120 <_svfiprintf_r+0x1ec>
 8003f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f7e:	f04f 0901 	mov.w	r9, #1
 8003f82:	4623      	mov	r3, r4
 8003f84:	469a      	mov	sl, r3
 8003f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f8a:	b10a      	cbz	r2, 8003f90 <_svfiprintf_r+0x5c>
 8003f8c:	2a25      	cmp	r2, #37	; 0x25
 8003f8e:	d1f9      	bne.n	8003f84 <_svfiprintf_r+0x50>
 8003f90:	ebba 0b04 	subs.w	fp, sl, r4
 8003f94:	d00b      	beq.n	8003fae <_svfiprintf_r+0x7a>
 8003f96:	465b      	mov	r3, fp
 8003f98:	4622      	mov	r2, r4
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f7ff ff6d 	bl	8003e7c <__ssputs_r>
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	f000 80aa 	beq.w	80040fc <_svfiprintf_r+0x1c8>
 8003fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003faa:	445a      	add	r2, fp
 8003fac:	9209      	str	r2, [sp, #36]	; 0x24
 8003fae:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80a2 	beq.w	80040fc <_svfiprintf_r+0x1c8>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fc2:	f10a 0a01 	add.w	sl, sl, #1
 8003fc6:	9304      	str	r3, [sp, #16]
 8003fc8:	9307      	str	r3, [sp, #28]
 8003fca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fce:	931a      	str	r3, [sp, #104]	; 0x68
 8003fd0:	4654      	mov	r4, sl
 8003fd2:	2205      	movs	r2, #5
 8003fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd8:	4851      	ldr	r0, [pc, #324]	; (8004120 <_svfiprintf_r+0x1ec>)
 8003fda:	f7fc f919 	bl	8000210 <memchr>
 8003fde:	9a04      	ldr	r2, [sp, #16]
 8003fe0:	b9d8      	cbnz	r0, 800401a <_svfiprintf_r+0xe6>
 8003fe2:	06d0      	lsls	r0, r2, #27
 8003fe4:	bf44      	itt	mi
 8003fe6:	2320      	movmi	r3, #32
 8003fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fec:	0711      	lsls	r1, r2, #28
 8003fee:	bf44      	itt	mi
 8003ff0:	232b      	movmi	r3, #43	; 0x2b
 8003ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8003ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8003ffc:	d015      	beq.n	800402a <_svfiprintf_r+0xf6>
 8003ffe:	9a07      	ldr	r2, [sp, #28]
 8004000:	4654      	mov	r4, sl
 8004002:	2000      	movs	r0, #0
 8004004:	f04f 0c0a 	mov.w	ip, #10
 8004008:	4621      	mov	r1, r4
 800400a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800400e:	3b30      	subs	r3, #48	; 0x30
 8004010:	2b09      	cmp	r3, #9
 8004012:	d94e      	bls.n	80040b2 <_svfiprintf_r+0x17e>
 8004014:	b1b0      	cbz	r0, 8004044 <_svfiprintf_r+0x110>
 8004016:	9207      	str	r2, [sp, #28]
 8004018:	e014      	b.n	8004044 <_svfiprintf_r+0x110>
 800401a:	eba0 0308 	sub.w	r3, r0, r8
 800401e:	fa09 f303 	lsl.w	r3, r9, r3
 8004022:	4313      	orrs	r3, r2
 8004024:	9304      	str	r3, [sp, #16]
 8004026:	46a2      	mov	sl, r4
 8004028:	e7d2      	b.n	8003fd0 <_svfiprintf_r+0x9c>
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	1d19      	adds	r1, r3, #4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	9103      	str	r1, [sp, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	bfbb      	ittet	lt
 8004036:	425b      	neglt	r3, r3
 8004038:	f042 0202 	orrlt.w	r2, r2, #2
 800403c:	9307      	strge	r3, [sp, #28]
 800403e:	9307      	strlt	r3, [sp, #28]
 8004040:	bfb8      	it	lt
 8004042:	9204      	strlt	r2, [sp, #16]
 8004044:	7823      	ldrb	r3, [r4, #0]
 8004046:	2b2e      	cmp	r3, #46	; 0x2e
 8004048:	d10c      	bne.n	8004064 <_svfiprintf_r+0x130>
 800404a:	7863      	ldrb	r3, [r4, #1]
 800404c:	2b2a      	cmp	r3, #42	; 0x2a
 800404e:	d135      	bne.n	80040bc <_svfiprintf_r+0x188>
 8004050:	9b03      	ldr	r3, [sp, #12]
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	9203      	str	r2, [sp, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	bfb8      	it	lt
 800405c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004060:	3402      	adds	r4, #2
 8004062:	9305      	str	r3, [sp, #20]
 8004064:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004130 <_svfiprintf_r+0x1fc>
 8004068:	7821      	ldrb	r1, [r4, #0]
 800406a:	2203      	movs	r2, #3
 800406c:	4650      	mov	r0, sl
 800406e:	f7fc f8cf 	bl	8000210 <memchr>
 8004072:	b140      	cbz	r0, 8004086 <_svfiprintf_r+0x152>
 8004074:	2340      	movs	r3, #64	; 0x40
 8004076:	eba0 000a 	sub.w	r0, r0, sl
 800407a:	fa03 f000 	lsl.w	r0, r3, r0
 800407e:	9b04      	ldr	r3, [sp, #16]
 8004080:	4303      	orrs	r3, r0
 8004082:	3401      	adds	r4, #1
 8004084:	9304      	str	r3, [sp, #16]
 8004086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800408a:	4826      	ldr	r0, [pc, #152]	; (8004124 <_svfiprintf_r+0x1f0>)
 800408c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004090:	2206      	movs	r2, #6
 8004092:	f7fc f8bd 	bl	8000210 <memchr>
 8004096:	2800      	cmp	r0, #0
 8004098:	d038      	beq.n	800410c <_svfiprintf_r+0x1d8>
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <_svfiprintf_r+0x1f4>)
 800409c:	bb1b      	cbnz	r3, 80040e6 <_svfiprintf_r+0x1b2>
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	3307      	adds	r3, #7
 80040a2:	f023 0307 	bic.w	r3, r3, #7
 80040a6:	3308      	adds	r3, #8
 80040a8:	9303      	str	r3, [sp, #12]
 80040aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ac:	4433      	add	r3, r6
 80040ae:	9309      	str	r3, [sp, #36]	; 0x24
 80040b0:	e767      	b.n	8003f82 <_svfiprintf_r+0x4e>
 80040b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80040b6:	460c      	mov	r4, r1
 80040b8:	2001      	movs	r0, #1
 80040ba:	e7a5      	b.n	8004008 <_svfiprintf_r+0xd4>
 80040bc:	2300      	movs	r3, #0
 80040be:	3401      	adds	r4, #1
 80040c0:	9305      	str	r3, [sp, #20]
 80040c2:	4619      	mov	r1, r3
 80040c4:	f04f 0c0a 	mov.w	ip, #10
 80040c8:	4620      	mov	r0, r4
 80040ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ce:	3a30      	subs	r2, #48	; 0x30
 80040d0:	2a09      	cmp	r2, #9
 80040d2:	d903      	bls.n	80040dc <_svfiprintf_r+0x1a8>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0c5      	beq.n	8004064 <_svfiprintf_r+0x130>
 80040d8:	9105      	str	r1, [sp, #20]
 80040da:	e7c3      	b.n	8004064 <_svfiprintf_r+0x130>
 80040dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80040e0:	4604      	mov	r4, r0
 80040e2:	2301      	movs	r3, #1
 80040e4:	e7f0      	b.n	80040c8 <_svfiprintf_r+0x194>
 80040e6:	ab03      	add	r3, sp, #12
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	462a      	mov	r2, r5
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <_svfiprintf_r+0x1f8>)
 80040ee:	a904      	add	r1, sp, #16
 80040f0:	4638      	mov	r0, r7
 80040f2:	f3af 8000 	nop.w
 80040f6:	1c42      	adds	r2, r0, #1
 80040f8:	4606      	mov	r6, r0
 80040fa:	d1d6      	bne.n	80040aa <_svfiprintf_r+0x176>
 80040fc:	89ab      	ldrh	r3, [r5, #12]
 80040fe:	065b      	lsls	r3, r3, #25
 8004100:	f53f af2c 	bmi.w	8003f5c <_svfiprintf_r+0x28>
 8004104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004106:	b01d      	add	sp, #116	; 0x74
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410c:	ab03      	add	r3, sp, #12
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	462a      	mov	r2, r5
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <_svfiprintf_r+0x1f8>)
 8004114:	a904      	add	r1, sp, #16
 8004116:	4638      	mov	r0, r7
 8004118:	f000 f87a 	bl	8004210 <_printf_i>
 800411c:	e7eb      	b.n	80040f6 <_svfiprintf_r+0x1c2>
 800411e:	bf00      	nop
 8004120:	080046e0 	.word	0x080046e0
 8004124:	080046ea 	.word	0x080046ea
 8004128:	00000000 	.word	0x00000000
 800412c:	08003e7d 	.word	0x08003e7d
 8004130:	080046e6 	.word	0x080046e6

08004134 <_printf_common>:
 8004134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	4616      	mov	r6, r2
 800413a:	4699      	mov	r9, r3
 800413c:	688a      	ldr	r2, [r1, #8]
 800413e:	690b      	ldr	r3, [r1, #16]
 8004140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004144:	4293      	cmp	r3, r2
 8004146:	bfb8      	it	lt
 8004148:	4613      	movlt	r3, r2
 800414a:	6033      	str	r3, [r6, #0]
 800414c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004150:	4607      	mov	r7, r0
 8004152:	460c      	mov	r4, r1
 8004154:	b10a      	cbz	r2, 800415a <_printf_common+0x26>
 8004156:	3301      	adds	r3, #1
 8004158:	6033      	str	r3, [r6, #0]
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	0699      	lsls	r1, r3, #26
 800415e:	bf42      	ittt	mi
 8004160:	6833      	ldrmi	r3, [r6, #0]
 8004162:	3302      	addmi	r3, #2
 8004164:	6033      	strmi	r3, [r6, #0]
 8004166:	6825      	ldr	r5, [r4, #0]
 8004168:	f015 0506 	ands.w	r5, r5, #6
 800416c:	d106      	bne.n	800417c <_printf_common+0x48>
 800416e:	f104 0a19 	add.w	sl, r4, #25
 8004172:	68e3      	ldr	r3, [r4, #12]
 8004174:	6832      	ldr	r2, [r6, #0]
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	42ab      	cmp	r3, r5
 800417a:	dc26      	bgt.n	80041ca <_printf_common+0x96>
 800417c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004180:	1e13      	subs	r3, r2, #0
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	bf18      	it	ne
 8004186:	2301      	movne	r3, #1
 8004188:	0692      	lsls	r2, r2, #26
 800418a:	d42b      	bmi.n	80041e4 <_printf_common+0xb0>
 800418c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004190:	4649      	mov	r1, r9
 8004192:	4638      	mov	r0, r7
 8004194:	47c0      	blx	r8
 8004196:	3001      	adds	r0, #1
 8004198:	d01e      	beq.n	80041d8 <_printf_common+0xa4>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	68e5      	ldr	r5, [r4, #12]
 800419e:	6832      	ldr	r2, [r6, #0]
 80041a0:	f003 0306 	and.w	r3, r3, #6
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	bf08      	it	eq
 80041a8:	1aad      	subeq	r5, r5, r2
 80041aa:	68a3      	ldr	r3, [r4, #8]
 80041ac:	6922      	ldr	r2, [r4, #16]
 80041ae:	bf0c      	ite	eq
 80041b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041b4:	2500      	movne	r5, #0
 80041b6:	4293      	cmp	r3, r2
 80041b8:	bfc4      	itt	gt
 80041ba:	1a9b      	subgt	r3, r3, r2
 80041bc:	18ed      	addgt	r5, r5, r3
 80041be:	2600      	movs	r6, #0
 80041c0:	341a      	adds	r4, #26
 80041c2:	42b5      	cmp	r5, r6
 80041c4:	d11a      	bne.n	80041fc <_printf_common+0xc8>
 80041c6:	2000      	movs	r0, #0
 80041c8:	e008      	b.n	80041dc <_printf_common+0xa8>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4652      	mov	r2, sl
 80041ce:	4649      	mov	r1, r9
 80041d0:	4638      	mov	r0, r7
 80041d2:	47c0      	blx	r8
 80041d4:	3001      	adds	r0, #1
 80041d6:	d103      	bne.n	80041e0 <_printf_common+0xac>
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e0:	3501      	adds	r5, #1
 80041e2:	e7c6      	b.n	8004172 <_printf_common+0x3e>
 80041e4:	18e1      	adds	r1, r4, r3
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	2030      	movs	r0, #48	; 0x30
 80041ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ee:	4422      	add	r2, r4
 80041f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041f8:	3302      	adds	r3, #2
 80041fa:	e7c7      	b.n	800418c <_printf_common+0x58>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4622      	mov	r2, r4
 8004200:	4649      	mov	r1, r9
 8004202:	4638      	mov	r0, r7
 8004204:	47c0      	blx	r8
 8004206:	3001      	adds	r0, #1
 8004208:	d0e6      	beq.n	80041d8 <_printf_common+0xa4>
 800420a:	3601      	adds	r6, #1
 800420c:	e7d9      	b.n	80041c2 <_printf_common+0x8e>
	...

08004210 <_printf_i>:
 8004210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	460c      	mov	r4, r1
 8004216:	4691      	mov	r9, r2
 8004218:	7e27      	ldrb	r7, [r4, #24]
 800421a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800421c:	2f78      	cmp	r7, #120	; 0x78
 800421e:	4680      	mov	r8, r0
 8004220:	469a      	mov	sl, r3
 8004222:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004226:	d807      	bhi.n	8004238 <_printf_i+0x28>
 8004228:	2f62      	cmp	r7, #98	; 0x62
 800422a:	d80a      	bhi.n	8004242 <_printf_i+0x32>
 800422c:	2f00      	cmp	r7, #0
 800422e:	f000 80d8 	beq.w	80043e2 <_printf_i+0x1d2>
 8004232:	2f58      	cmp	r7, #88	; 0x58
 8004234:	f000 80a3 	beq.w	800437e <_printf_i+0x16e>
 8004238:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800423c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004240:	e03a      	b.n	80042b8 <_printf_i+0xa8>
 8004242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004246:	2b15      	cmp	r3, #21
 8004248:	d8f6      	bhi.n	8004238 <_printf_i+0x28>
 800424a:	a001      	add	r0, pc, #4	; (adr r0, 8004250 <_printf_i+0x40>)
 800424c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004250:	080042a9 	.word	0x080042a9
 8004254:	080042bd 	.word	0x080042bd
 8004258:	08004239 	.word	0x08004239
 800425c:	08004239 	.word	0x08004239
 8004260:	08004239 	.word	0x08004239
 8004264:	08004239 	.word	0x08004239
 8004268:	080042bd 	.word	0x080042bd
 800426c:	08004239 	.word	0x08004239
 8004270:	08004239 	.word	0x08004239
 8004274:	08004239 	.word	0x08004239
 8004278:	08004239 	.word	0x08004239
 800427c:	080043c9 	.word	0x080043c9
 8004280:	080042ed 	.word	0x080042ed
 8004284:	080043ab 	.word	0x080043ab
 8004288:	08004239 	.word	0x08004239
 800428c:	08004239 	.word	0x08004239
 8004290:	080043eb 	.word	0x080043eb
 8004294:	08004239 	.word	0x08004239
 8004298:	080042ed 	.word	0x080042ed
 800429c:	08004239 	.word	0x08004239
 80042a0:	08004239 	.word	0x08004239
 80042a4:	080043b3 	.word	0x080043b3
 80042a8:	680b      	ldr	r3, [r1, #0]
 80042aa:	1d1a      	adds	r2, r3, #4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	600a      	str	r2, [r1, #0]
 80042b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0a3      	b.n	8004404 <_printf_i+0x1f4>
 80042bc:	6825      	ldr	r5, [r4, #0]
 80042be:	6808      	ldr	r0, [r1, #0]
 80042c0:	062e      	lsls	r6, r5, #24
 80042c2:	f100 0304 	add.w	r3, r0, #4
 80042c6:	d50a      	bpl.n	80042de <_printf_i+0xce>
 80042c8:	6805      	ldr	r5, [r0, #0]
 80042ca:	600b      	str	r3, [r1, #0]
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	da03      	bge.n	80042d8 <_printf_i+0xc8>
 80042d0:	232d      	movs	r3, #45	; 0x2d
 80042d2:	426d      	negs	r5, r5
 80042d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042d8:	485e      	ldr	r0, [pc, #376]	; (8004454 <_printf_i+0x244>)
 80042da:	230a      	movs	r3, #10
 80042dc:	e019      	b.n	8004312 <_printf_i+0x102>
 80042de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80042e2:	6805      	ldr	r5, [r0, #0]
 80042e4:	600b      	str	r3, [r1, #0]
 80042e6:	bf18      	it	ne
 80042e8:	b22d      	sxthne	r5, r5
 80042ea:	e7ef      	b.n	80042cc <_printf_i+0xbc>
 80042ec:	680b      	ldr	r3, [r1, #0]
 80042ee:	6825      	ldr	r5, [r4, #0]
 80042f0:	1d18      	adds	r0, r3, #4
 80042f2:	6008      	str	r0, [r1, #0]
 80042f4:	0628      	lsls	r0, r5, #24
 80042f6:	d501      	bpl.n	80042fc <_printf_i+0xec>
 80042f8:	681d      	ldr	r5, [r3, #0]
 80042fa:	e002      	b.n	8004302 <_printf_i+0xf2>
 80042fc:	0669      	lsls	r1, r5, #25
 80042fe:	d5fb      	bpl.n	80042f8 <_printf_i+0xe8>
 8004300:	881d      	ldrh	r5, [r3, #0]
 8004302:	4854      	ldr	r0, [pc, #336]	; (8004454 <_printf_i+0x244>)
 8004304:	2f6f      	cmp	r7, #111	; 0x6f
 8004306:	bf0c      	ite	eq
 8004308:	2308      	moveq	r3, #8
 800430a:	230a      	movne	r3, #10
 800430c:	2100      	movs	r1, #0
 800430e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004312:	6866      	ldr	r6, [r4, #4]
 8004314:	60a6      	str	r6, [r4, #8]
 8004316:	2e00      	cmp	r6, #0
 8004318:	bfa2      	ittt	ge
 800431a:	6821      	ldrge	r1, [r4, #0]
 800431c:	f021 0104 	bicge.w	r1, r1, #4
 8004320:	6021      	strge	r1, [r4, #0]
 8004322:	b90d      	cbnz	r5, 8004328 <_printf_i+0x118>
 8004324:	2e00      	cmp	r6, #0
 8004326:	d04d      	beq.n	80043c4 <_printf_i+0x1b4>
 8004328:	4616      	mov	r6, r2
 800432a:	fbb5 f1f3 	udiv	r1, r5, r3
 800432e:	fb03 5711 	mls	r7, r3, r1, r5
 8004332:	5dc7      	ldrb	r7, [r0, r7]
 8004334:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004338:	462f      	mov	r7, r5
 800433a:	42bb      	cmp	r3, r7
 800433c:	460d      	mov	r5, r1
 800433e:	d9f4      	bls.n	800432a <_printf_i+0x11a>
 8004340:	2b08      	cmp	r3, #8
 8004342:	d10b      	bne.n	800435c <_printf_i+0x14c>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	07df      	lsls	r7, r3, #31
 8004348:	d508      	bpl.n	800435c <_printf_i+0x14c>
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	6861      	ldr	r1, [r4, #4]
 800434e:	4299      	cmp	r1, r3
 8004350:	bfde      	ittt	le
 8004352:	2330      	movle	r3, #48	; 0x30
 8004354:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004358:	f106 36ff 	addle.w	r6, r6, #4294967295
 800435c:	1b92      	subs	r2, r2, r6
 800435e:	6122      	str	r2, [r4, #16]
 8004360:	f8cd a000 	str.w	sl, [sp]
 8004364:	464b      	mov	r3, r9
 8004366:	aa03      	add	r2, sp, #12
 8004368:	4621      	mov	r1, r4
 800436a:	4640      	mov	r0, r8
 800436c:	f7ff fee2 	bl	8004134 <_printf_common>
 8004370:	3001      	adds	r0, #1
 8004372:	d14c      	bne.n	800440e <_printf_i+0x1fe>
 8004374:	f04f 30ff 	mov.w	r0, #4294967295
 8004378:	b004      	add	sp, #16
 800437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437e:	4835      	ldr	r0, [pc, #212]	; (8004454 <_printf_i+0x244>)
 8004380:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	680e      	ldr	r6, [r1, #0]
 8004388:	061f      	lsls	r7, r3, #24
 800438a:	f856 5b04 	ldr.w	r5, [r6], #4
 800438e:	600e      	str	r6, [r1, #0]
 8004390:	d514      	bpl.n	80043bc <_printf_i+0x1ac>
 8004392:	07d9      	lsls	r1, r3, #31
 8004394:	bf44      	itt	mi
 8004396:	f043 0320 	orrmi.w	r3, r3, #32
 800439a:	6023      	strmi	r3, [r4, #0]
 800439c:	b91d      	cbnz	r5, 80043a6 <_printf_i+0x196>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	f023 0320 	bic.w	r3, r3, #32
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	2310      	movs	r3, #16
 80043a8:	e7b0      	b.n	800430c <_printf_i+0xfc>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	f043 0320 	orr.w	r3, r3, #32
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	2378      	movs	r3, #120	; 0x78
 80043b4:	4828      	ldr	r0, [pc, #160]	; (8004458 <_printf_i+0x248>)
 80043b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043ba:	e7e3      	b.n	8004384 <_printf_i+0x174>
 80043bc:	065e      	lsls	r6, r3, #25
 80043be:	bf48      	it	mi
 80043c0:	b2ad      	uxthmi	r5, r5
 80043c2:	e7e6      	b.n	8004392 <_printf_i+0x182>
 80043c4:	4616      	mov	r6, r2
 80043c6:	e7bb      	b.n	8004340 <_printf_i+0x130>
 80043c8:	680b      	ldr	r3, [r1, #0]
 80043ca:	6826      	ldr	r6, [r4, #0]
 80043cc:	6960      	ldr	r0, [r4, #20]
 80043ce:	1d1d      	adds	r5, r3, #4
 80043d0:	600d      	str	r5, [r1, #0]
 80043d2:	0635      	lsls	r5, r6, #24
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	d501      	bpl.n	80043dc <_printf_i+0x1cc>
 80043d8:	6018      	str	r0, [r3, #0]
 80043da:	e002      	b.n	80043e2 <_printf_i+0x1d2>
 80043dc:	0671      	lsls	r1, r6, #25
 80043de:	d5fb      	bpl.n	80043d8 <_printf_i+0x1c8>
 80043e0:	8018      	strh	r0, [r3, #0]
 80043e2:	2300      	movs	r3, #0
 80043e4:	6123      	str	r3, [r4, #16]
 80043e6:	4616      	mov	r6, r2
 80043e8:	e7ba      	b.n	8004360 <_printf_i+0x150>
 80043ea:	680b      	ldr	r3, [r1, #0]
 80043ec:	1d1a      	adds	r2, r3, #4
 80043ee:	600a      	str	r2, [r1, #0]
 80043f0:	681e      	ldr	r6, [r3, #0]
 80043f2:	6862      	ldr	r2, [r4, #4]
 80043f4:	2100      	movs	r1, #0
 80043f6:	4630      	mov	r0, r6
 80043f8:	f7fb ff0a 	bl	8000210 <memchr>
 80043fc:	b108      	cbz	r0, 8004402 <_printf_i+0x1f2>
 80043fe:	1b80      	subs	r0, r0, r6
 8004400:	6060      	str	r0, [r4, #4]
 8004402:	6863      	ldr	r3, [r4, #4]
 8004404:	6123      	str	r3, [r4, #16]
 8004406:	2300      	movs	r3, #0
 8004408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800440c:	e7a8      	b.n	8004360 <_printf_i+0x150>
 800440e:	6923      	ldr	r3, [r4, #16]
 8004410:	4632      	mov	r2, r6
 8004412:	4649      	mov	r1, r9
 8004414:	4640      	mov	r0, r8
 8004416:	47d0      	blx	sl
 8004418:	3001      	adds	r0, #1
 800441a:	d0ab      	beq.n	8004374 <_printf_i+0x164>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	079b      	lsls	r3, r3, #30
 8004420:	d413      	bmi.n	800444a <_printf_i+0x23a>
 8004422:	68e0      	ldr	r0, [r4, #12]
 8004424:	9b03      	ldr	r3, [sp, #12]
 8004426:	4298      	cmp	r0, r3
 8004428:	bfb8      	it	lt
 800442a:	4618      	movlt	r0, r3
 800442c:	e7a4      	b.n	8004378 <_printf_i+0x168>
 800442e:	2301      	movs	r3, #1
 8004430:	4632      	mov	r2, r6
 8004432:	4649      	mov	r1, r9
 8004434:	4640      	mov	r0, r8
 8004436:	47d0      	blx	sl
 8004438:	3001      	adds	r0, #1
 800443a:	d09b      	beq.n	8004374 <_printf_i+0x164>
 800443c:	3501      	adds	r5, #1
 800443e:	68e3      	ldr	r3, [r4, #12]
 8004440:	9903      	ldr	r1, [sp, #12]
 8004442:	1a5b      	subs	r3, r3, r1
 8004444:	42ab      	cmp	r3, r5
 8004446:	dcf2      	bgt.n	800442e <_printf_i+0x21e>
 8004448:	e7eb      	b.n	8004422 <_printf_i+0x212>
 800444a:	2500      	movs	r5, #0
 800444c:	f104 0619 	add.w	r6, r4, #25
 8004450:	e7f5      	b.n	800443e <_printf_i+0x22e>
 8004452:	bf00      	nop
 8004454:	080046f1 	.word	0x080046f1
 8004458:	08004702 	.word	0x08004702

0800445c <memcpy>:
 800445c:	440a      	add	r2, r1
 800445e:	4291      	cmp	r1, r2
 8004460:	f100 33ff 	add.w	r3, r0, #4294967295
 8004464:	d100      	bne.n	8004468 <memcpy+0xc>
 8004466:	4770      	bx	lr
 8004468:	b510      	push	{r4, lr}
 800446a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800446e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004472:	4291      	cmp	r1, r2
 8004474:	d1f9      	bne.n	800446a <memcpy+0xe>
 8004476:	bd10      	pop	{r4, pc}

08004478 <memmove>:
 8004478:	4288      	cmp	r0, r1
 800447a:	b510      	push	{r4, lr}
 800447c:	eb01 0402 	add.w	r4, r1, r2
 8004480:	d902      	bls.n	8004488 <memmove+0x10>
 8004482:	4284      	cmp	r4, r0
 8004484:	4623      	mov	r3, r4
 8004486:	d807      	bhi.n	8004498 <memmove+0x20>
 8004488:	1e43      	subs	r3, r0, #1
 800448a:	42a1      	cmp	r1, r4
 800448c:	d008      	beq.n	80044a0 <memmove+0x28>
 800448e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004496:	e7f8      	b.n	800448a <memmove+0x12>
 8004498:	4402      	add	r2, r0
 800449a:	4601      	mov	r1, r0
 800449c:	428a      	cmp	r2, r1
 800449e:	d100      	bne.n	80044a2 <memmove+0x2a>
 80044a0:	bd10      	pop	{r4, pc}
 80044a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044aa:	e7f7      	b.n	800449c <memmove+0x24>

080044ac <_free_r>:
 80044ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ae:	2900      	cmp	r1, #0
 80044b0:	d048      	beq.n	8004544 <_free_r+0x98>
 80044b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b6:	9001      	str	r0, [sp, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f1a1 0404 	sub.w	r4, r1, #4
 80044be:	bfb8      	it	lt
 80044c0:	18e4      	addlt	r4, r4, r3
 80044c2:	f000 f8d3 	bl	800466c <__malloc_lock>
 80044c6:	4a20      	ldr	r2, [pc, #128]	; (8004548 <_free_r+0x9c>)
 80044c8:	9801      	ldr	r0, [sp, #4]
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	4615      	mov	r5, r2
 80044ce:	b933      	cbnz	r3, 80044de <_free_r+0x32>
 80044d0:	6063      	str	r3, [r4, #4]
 80044d2:	6014      	str	r4, [r2, #0]
 80044d4:	b003      	add	sp, #12
 80044d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044da:	f000 b8cd 	b.w	8004678 <__malloc_unlock>
 80044de:	42a3      	cmp	r3, r4
 80044e0:	d90b      	bls.n	80044fa <_free_r+0x4e>
 80044e2:	6821      	ldr	r1, [r4, #0]
 80044e4:	1862      	adds	r2, r4, r1
 80044e6:	4293      	cmp	r3, r2
 80044e8:	bf04      	itt	eq
 80044ea:	681a      	ldreq	r2, [r3, #0]
 80044ec:	685b      	ldreq	r3, [r3, #4]
 80044ee:	6063      	str	r3, [r4, #4]
 80044f0:	bf04      	itt	eq
 80044f2:	1852      	addeq	r2, r2, r1
 80044f4:	6022      	streq	r2, [r4, #0]
 80044f6:	602c      	str	r4, [r5, #0]
 80044f8:	e7ec      	b.n	80044d4 <_free_r+0x28>
 80044fa:	461a      	mov	r2, r3
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	b10b      	cbz	r3, 8004504 <_free_r+0x58>
 8004500:	42a3      	cmp	r3, r4
 8004502:	d9fa      	bls.n	80044fa <_free_r+0x4e>
 8004504:	6811      	ldr	r1, [r2, #0]
 8004506:	1855      	adds	r5, r2, r1
 8004508:	42a5      	cmp	r5, r4
 800450a:	d10b      	bne.n	8004524 <_free_r+0x78>
 800450c:	6824      	ldr	r4, [r4, #0]
 800450e:	4421      	add	r1, r4
 8004510:	1854      	adds	r4, r2, r1
 8004512:	42a3      	cmp	r3, r4
 8004514:	6011      	str	r1, [r2, #0]
 8004516:	d1dd      	bne.n	80044d4 <_free_r+0x28>
 8004518:	681c      	ldr	r4, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	6053      	str	r3, [r2, #4]
 800451e:	4421      	add	r1, r4
 8004520:	6011      	str	r1, [r2, #0]
 8004522:	e7d7      	b.n	80044d4 <_free_r+0x28>
 8004524:	d902      	bls.n	800452c <_free_r+0x80>
 8004526:	230c      	movs	r3, #12
 8004528:	6003      	str	r3, [r0, #0]
 800452a:	e7d3      	b.n	80044d4 <_free_r+0x28>
 800452c:	6825      	ldr	r5, [r4, #0]
 800452e:	1961      	adds	r1, r4, r5
 8004530:	428b      	cmp	r3, r1
 8004532:	bf04      	itt	eq
 8004534:	6819      	ldreq	r1, [r3, #0]
 8004536:	685b      	ldreq	r3, [r3, #4]
 8004538:	6063      	str	r3, [r4, #4]
 800453a:	bf04      	itt	eq
 800453c:	1949      	addeq	r1, r1, r5
 800453e:	6021      	streq	r1, [r4, #0]
 8004540:	6054      	str	r4, [r2, #4]
 8004542:	e7c7      	b.n	80044d4 <_free_r+0x28>
 8004544:	b003      	add	sp, #12
 8004546:	bd30      	pop	{r4, r5, pc}
 8004548:	20007118 	.word	0x20007118

0800454c <_malloc_r>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	1ccd      	adds	r5, r1, #3
 8004550:	f025 0503 	bic.w	r5, r5, #3
 8004554:	3508      	adds	r5, #8
 8004556:	2d0c      	cmp	r5, #12
 8004558:	bf38      	it	cc
 800455a:	250c      	movcc	r5, #12
 800455c:	2d00      	cmp	r5, #0
 800455e:	4606      	mov	r6, r0
 8004560:	db01      	blt.n	8004566 <_malloc_r+0x1a>
 8004562:	42a9      	cmp	r1, r5
 8004564:	d903      	bls.n	800456e <_malloc_r+0x22>
 8004566:	230c      	movs	r3, #12
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	2000      	movs	r0, #0
 800456c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800456e:	f000 f87d 	bl	800466c <__malloc_lock>
 8004572:	4921      	ldr	r1, [pc, #132]	; (80045f8 <_malloc_r+0xac>)
 8004574:	680a      	ldr	r2, [r1, #0]
 8004576:	4614      	mov	r4, r2
 8004578:	b99c      	cbnz	r4, 80045a2 <_malloc_r+0x56>
 800457a:	4f20      	ldr	r7, [pc, #128]	; (80045fc <_malloc_r+0xb0>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	b923      	cbnz	r3, 800458a <_malloc_r+0x3e>
 8004580:	4621      	mov	r1, r4
 8004582:	4630      	mov	r0, r6
 8004584:	f000 f862 	bl	800464c <_sbrk_r>
 8004588:	6038      	str	r0, [r7, #0]
 800458a:	4629      	mov	r1, r5
 800458c:	4630      	mov	r0, r6
 800458e:	f000 f85d 	bl	800464c <_sbrk_r>
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	d123      	bne.n	80045de <_malloc_r+0x92>
 8004596:	230c      	movs	r3, #12
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	4630      	mov	r0, r6
 800459c:	f000 f86c 	bl	8004678 <__malloc_unlock>
 80045a0:	e7e3      	b.n	800456a <_malloc_r+0x1e>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	1b5b      	subs	r3, r3, r5
 80045a6:	d417      	bmi.n	80045d8 <_malloc_r+0x8c>
 80045a8:	2b0b      	cmp	r3, #11
 80045aa:	d903      	bls.n	80045b4 <_malloc_r+0x68>
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	441c      	add	r4, r3
 80045b0:	6025      	str	r5, [r4, #0]
 80045b2:	e004      	b.n	80045be <_malloc_r+0x72>
 80045b4:	6863      	ldr	r3, [r4, #4]
 80045b6:	42a2      	cmp	r2, r4
 80045b8:	bf0c      	ite	eq
 80045ba:	600b      	streq	r3, [r1, #0]
 80045bc:	6053      	strne	r3, [r2, #4]
 80045be:	4630      	mov	r0, r6
 80045c0:	f000 f85a 	bl	8004678 <__malloc_unlock>
 80045c4:	f104 000b 	add.w	r0, r4, #11
 80045c8:	1d23      	adds	r3, r4, #4
 80045ca:	f020 0007 	bic.w	r0, r0, #7
 80045ce:	1ac2      	subs	r2, r0, r3
 80045d0:	d0cc      	beq.n	800456c <_malloc_r+0x20>
 80045d2:	1a1b      	subs	r3, r3, r0
 80045d4:	50a3      	str	r3, [r4, r2]
 80045d6:	e7c9      	b.n	800456c <_malloc_r+0x20>
 80045d8:	4622      	mov	r2, r4
 80045da:	6864      	ldr	r4, [r4, #4]
 80045dc:	e7cc      	b.n	8004578 <_malloc_r+0x2c>
 80045de:	1cc4      	adds	r4, r0, #3
 80045e0:	f024 0403 	bic.w	r4, r4, #3
 80045e4:	42a0      	cmp	r0, r4
 80045e6:	d0e3      	beq.n	80045b0 <_malloc_r+0x64>
 80045e8:	1a21      	subs	r1, r4, r0
 80045ea:	4630      	mov	r0, r6
 80045ec:	f000 f82e 	bl	800464c <_sbrk_r>
 80045f0:	3001      	adds	r0, #1
 80045f2:	d1dd      	bne.n	80045b0 <_malloc_r+0x64>
 80045f4:	e7cf      	b.n	8004596 <_malloc_r+0x4a>
 80045f6:	bf00      	nop
 80045f8:	20007118 	.word	0x20007118
 80045fc:	2000711c 	.word	0x2000711c

08004600 <_realloc_r>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	4607      	mov	r7, r0
 8004604:	4614      	mov	r4, r2
 8004606:	460e      	mov	r6, r1
 8004608:	b921      	cbnz	r1, 8004614 <_realloc_r+0x14>
 800460a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800460e:	4611      	mov	r1, r2
 8004610:	f7ff bf9c 	b.w	800454c <_malloc_r>
 8004614:	b922      	cbnz	r2, 8004620 <_realloc_r+0x20>
 8004616:	f7ff ff49 	bl	80044ac <_free_r>
 800461a:	4625      	mov	r5, r4
 800461c:	4628      	mov	r0, r5
 800461e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004620:	f000 f830 	bl	8004684 <_malloc_usable_size_r>
 8004624:	42a0      	cmp	r0, r4
 8004626:	d20f      	bcs.n	8004648 <_realloc_r+0x48>
 8004628:	4621      	mov	r1, r4
 800462a:	4638      	mov	r0, r7
 800462c:	f7ff ff8e 	bl	800454c <_malloc_r>
 8004630:	4605      	mov	r5, r0
 8004632:	2800      	cmp	r0, #0
 8004634:	d0f2      	beq.n	800461c <_realloc_r+0x1c>
 8004636:	4631      	mov	r1, r6
 8004638:	4622      	mov	r2, r4
 800463a:	f7ff ff0f 	bl	800445c <memcpy>
 800463e:	4631      	mov	r1, r6
 8004640:	4638      	mov	r0, r7
 8004642:	f7ff ff33 	bl	80044ac <_free_r>
 8004646:	e7e9      	b.n	800461c <_realloc_r+0x1c>
 8004648:	4635      	mov	r5, r6
 800464a:	e7e7      	b.n	800461c <_realloc_r+0x1c>

0800464c <_sbrk_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	4d06      	ldr	r5, [pc, #24]	; (8004668 <_sbrk_r+0x1c>)
 8004650:	2300      	movs	r3, #0
 8004652:	4604      	mov	r4, r0
 8004654:	4608      	mov	r0, r1
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	f7fc fcc6 	bl	8000fe8 <_sbrk>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_sbrk_r+0x1a>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_sbrk_r+0x1a>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	20007244 	.word	0x20007244

0800466c <__malloc_lock>:
 800466c:	4801      	ldr	r0, [pc, #4]	; (8004674 <__malloc_lock+0x8>)
 800466e:	f000 b811 	b.w	8004694 <__retarget_lock_acquire_recursive>
 8004672:	bf00      	nop
 8004674:	2000724c 	.word	0x2000724c

08004678 <__malloc_unlock>:
 8004678:	4801      	ldr	r0, [pc, #4]	; (8004680 <__malloc_unlock+0x8>)
 800467a:	f000 b80c 	b.w	8004696 <__retarget_lock_release_recursive>
 800467e:	bf00      	nop
 8004680:	2000724c 	.word	0x2000724c

08004684 <_malloc_usable_size_r>:
 8004684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004688:	1f18      	subs	r0, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	bfbc      	itt	lt
 800468e:	580b      	ldrlt	r3, [r1, r0]
 8004690:	18c0      	addlt	r0, r0, r3
 8004692:	4770      	bx	lr

08004694 <__retarget_lock_acquire_recursive>:
 8004694:	4770      	bx	lr

08004696 <__retarget_lock_release_recursive>:
 8004696:	4770      	bx	lr

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
